funkscene.parser = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "body": parse_body,
        "named_scene_assignment": parse_named_scene_assignment,
        "named_scene": parse_named_scene,
        "inline_named_scene_assignment": parse_inline_named_scene_assignment,
        "named_scene_body": parse_named_scene_body,
        "gosub_chain": parse_gosub_chain,
        "scene": parse_scene,
        "scene_body": parse_scene_body,
        "include": parse_include,
        "conjunctive_choice_list": parse_conjunctive_choice_list,
        "choice_list": parse_choice_list,
        "explicit_or_implicit_continuation": parse_explicit_or_implicit_continuation,
        "basic_goto_clause": parse_basic_goto_clause,
        "goto_clause": parse_goto_clause,
        "gosub_clause": parse_gosub_clause,
        "goto_clause_or_continuation": parse_goto_clause_or_continuation,
        "symbol_or_scene": parse_symbol_or_scene,
        "choice": parse_choice,
        "choose_expr": parse_choose_expr,
        "qualified_choose_expr": parse_qualified_choose_expr,
        "onetime_tag_expr": parse_onetime_tag_expr,
        "if_expr": parse_if_expr,
        "endscene": parse_endscene,
        "cycle": parse_cycle,
        "cycle_list": parse_cycle_list,
        "begin_cycle": parse_begin_cycle,
        "end_cycle": parse_end_cycle,
        "scene_deque": parse_scene_deque,
        "wrapped_scene_deque": parse_wrapped_scene_deque,
        "spc": parse_spc,
        "single_spc": parse_single_spc,
        "symbol": parse_symbol,
        "code": parse_code,
        "code_chars": parse_code_chars,
        "postponed_quoted_text": parse_postponed_quoted_text,
        "nonempty_quoted_text": parse_nonempty_quoted_text,
        "quoted_text": parse_quoted_text,
        "text": parse_text,
        "hash_rank": parse_hash_rank,
        "text_chars": parse_text_chars
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "body";
      }
      
      var pos = { offset: 0, line: 1, column: 1, seenCR: false };
      var reportFailures = 0;
      var rightmostFailuresPos = { offset: 0, line: 1, column: 1, seenCR: false };
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function clone(object) {
        var result = {};
        for (var key in object) {
          result[key] = object[key];
        }
        return result;
      }
      
      function advance(pos, n) {
        var endOffset = pos.offset + n;
        
        for (var offset = pos.offset; offset < endOffset; offset++) {
          var ch = input.charAt(offset);
          if (ch === "\n") {
            if (!pos.seenCR) { pos.line++; }
            pos.column = 1;
            pos.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            pos.line++;
            pos.column = 1;
            pos.seenCR = true;
          } else {
            pos.column++;
            pos.seenCR = false;
          }
        }
        
        pos.offset += n;
      }
      
      function matchFailed(failure) {
        if (pos.offset < rightmostFailuresPos.offset) {
          return;
        }
        
        if (pos.offset > rightmostFailuresPos.offset) {
          rightmostFailuresPos = clone(pos);
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_body() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_named_scene_assignment();
        if (result0 !== null) {
          result1 = parse_body();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, page, rest) { return page + rest; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_scene();
          if (result0 !== null) {
            result1 = parse_body();
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, scene, rest) { return scene + rest; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_qualified_choose_expr();
            if (result0 !== null) {
              result1 = parse_body();
              result1 = result1 !== null ? result1 : "";
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, c, rest) { return c + rest; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              result0 = parse_code();
              if (result0 !== null) {
                result1 = parse_body();
                result1 = result1 !== null ? result1 : "";
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, code, rest) { return code + rest; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
            }
          }
        }
        return result0;
      }
      
      function parse_named_scene_assignment() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 5) === "#PAGE") {
          result0 = "#PAGE";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#PAGE\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_spc();
          if (result1 !== null) {
            result2 = parse_symbol();
            if (result2 !== null) {
              result3 = parse_spc();
              if (result3 !== null) {
                result4 = parse_named_scene();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name, scene) { return makeAssignment (name, scene); })(pos0.offset, pos0.line, pos0.column, result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_named_scene() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 6) === "#SCENE") {
          result0 = "#SCENE";
          advance(pos, 6);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#SCENE\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_single_spc();
          if (result1 !== null) {
            result2 = parse_named_scene_body();
            if (result2 !== null) {
              result3 = parse_endscene();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, s) { return s; })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 2) === "#(") {
            result0 = "#(";
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"#(\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_single_spc();
            if (result1 !== null) {
              result2 = parse_named_scene_body();
              if (result2 !== null) {
                if (input.substr(pos.offset, 2) === "#)") {
                  result3 = "#)";
                  advance(pos, 2);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"#)\"");
                  }
                }
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, s) { return s; })(pos0.offset, pos0.line, pos0.column, result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_inline_named_scene_assignment() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 5) === "#PAGE") {
          result0 = "#PAGE";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#PAGE\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_spc();
          if (result1 !== null) {
            result2 = parse_symbol();
            if (result2 !== null) {
              result3 = parse_spc();
              if (result3 !== null) {
                result4 = parse_named_scene_body();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name, scene) { return [name, makeAssignment (name, scene)]; })(pos0.offset, pos0.line, pos0.column, result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_named_scene_body() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_include();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_include();
        }
        if (result0 !== null) {
          result1 = parse_nonempty_quoted_text();
          if (result1 !== null) {
            result2 = parse_conjunctive_choice_list();
            if (result2 !== null) {
              result3 = parse_inline_named_scene_assignment();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, incl, scene_desc, choices, cont) { return sceneFunction (cont[0], incl, scene_desc, choices) + ";\n" + cont[1]; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = [];
          result1 = parse_include();
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_include();
          }
          if (result0 !== null) {
            result1 = parse_nonempty_quoted_text();
            if (result1 !== null) {
              result2 = parse_gosub_chain();
              if (result2 !== null) {
                result3 = parse_inline_named_scene_assignment();
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, incl, scene_desc, gosubs, cont) { return sceneFunction (cont[0], incl, scene_desc, gosubs) + ";\n" + cont[1]; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = [];
            result1 = parse_include();
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_include();
            }
            if (result0 !== null) {
              result1 = parse_nonempty_quoted_text();
              if (result1 !== null) {
                result2 = parse_inline_named_scene_assignment();
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, incl, scene_desc, cont) { return sceneFunction (cont[0], incl, scene_desc, [makeGoto("defaultContinuation")]) + ";\n" + cont[1]; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              result0 = parse_scene_body();
            }
          }
        }
        return result0;
      }
      
      function parse_gosub_chain() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_gosub_clause();
        if (result0 !== null) {
          result1 = parse_gosub_chain();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, subr, chain) { return gosubWithContinuation(subr,chain); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_gosub_clause();
          if (result0 !== null) {
            result0 = (function(offset, line, column, subr) { return gosubWithContinuation(subr,"defaultContinuation"); })(pos0.offset, pos0.line, pos0.column, result0);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_scene() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 6) === "#SCENE") {
          result0 = "#SCENE";
          advance(pos, 6);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#SCENE\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_single_spc();
          if (result1 !== null) {
            result2 = parse_scene_body();
            if (result2 !== null) {
              result3 = parse_endscene();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, s) { return s; })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 2) === "#(") {
            result0 = "#(";
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"#(\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_single_spc();
            if (result1 !== null) {
              result2 = parse_scene_body();
              if (result2 !== null) {
                if (input.substr(pos.offset, 2) === "#)") {
                  result3 = "#)";
                  advance(pos, 2);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"#)\"");
                  }
                }
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, s) { return s; })(pos0.offset, pos0.line, pos0.column, result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_scene_body() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_include();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_include();
        }
        if (result0 !== null) {
          result1 = parse_nonempty_quoted_text();
          if (result1 !== null) {
            result2 = parse_conjunctive_choice_list();
            if (result2 !== null) {
              result3 = parse_explicit_or_implicit_continuation();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, incl, scene_desc, choices, cont) { return sceneFunction (cont, incl, scene_desc, choices); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = [];
          result1 = parse_include();
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_include();
          }
          if (result0 !== null) {
            result1 = parse_nonempty_quoted_text();
            if (result1 !== null) {
              result2 = parse_choice_list();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, incl, scene_desc, choices) { return sceneFunction (undefined, incl, scene_desc, choices); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_include() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_quoted_text();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          if (input.substr(pos.offset, 8) === "#INCLUDE") {
            result1 = "#INCLUDE";
            advance(pos, 8);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"#INCLUDE\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_spc();
            if (result2 !== null) {
              result3 = parse_symbol_or_scene();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, scene_desc, included) { return [scene_desc,included]; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_conjunctive_choice_list() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 6) === "#INPUT") {
          result0 = "#INPUT";
          advance(pos, 6);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#INPUT\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_single_spc();
          if (result1 !== null) {
            result2 = parse_quoted_text();
            if (result2 !== null) {
              if (input.substr(pos.offset, 3) === "#TO") {
                result3 = "#TO";
                advance(pos, 3);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"#TO\"");
                }
              }
              if (result3 !== null) {
                result4 = parse_single_spc();
                if (result4 !== null) {
                  result5 = parse_symbol();
                  if (result5 !== null) {
                    result6 = parse_spc();
                    if (result6 !== null) {
                      result7 = parse_goto_clause_or_continuation();
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, prompt, var_name, target) { return makeInput (prompt, target, var_name); })(pos0.offset, pos0.line, pos0.column, result0[2], result0[5], result0[7]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          result1 = parse_qualified_choose_expr();
          if (result1 !== null) {
            result0 = [];
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_qualified_choose_expr();
            }
          } else {
            result0 = null;
          }
        }
        return result0;
      }
      
      function parse_choice_list() {
        var result0, result1;
        var pos0, pos1;
        
        result0 = parse_conjunctive_choice_list();
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_goto_clause();
          if (result0 !== null) {
            result0 = (function(offset, line, column, target) { return [makeGoto (target)]; })(pos0.offset, pos0.line, pos0.column, result0);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.substr(pos.offset, 5) === "#OVER") {
              result0 = "#OVER";
              advance(pos, 5);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"#OVER\"");
              }
            }
            if (result0 !== null) {
              result1 = parse_spc();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column) { return []; })(pos0.offset, pos0.line, pos0.column);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              result0 = [];
              if (result0 !== null) {
                result0 = (function(offset, line, column) { return [gotoIfDefined ("defaultContinuation")]; })(pos0.offset, pos0.line, pos0.column);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
            }
          }
        }
        return result0;
      }
      
      function parse_explicit_or_implicit_continuation() {
        var result0;
        
        result0 = parse_basic_goto_clause();
        if (result0 === null) {
          result0 = parse_scene_body();
        }
        return result0;
      }
      
      function parse_basic_goto_clause() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 5) === "#GOTO") {
          result0 = "#GOTO";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#GOTO\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_spc();
          if (result1 !== null) {
            result2 = parse_symbol_or_scene();
            if (result2 !== null) {
              result3 = parse_spc();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, target) { return target; })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_goto_clause() {
        var result0, result1;
        var pos0, pos1;
        
        result0 = parse_basic_goto_clause();
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_gosub_clause();
          if (result0 !== null) {
            result1 = parse_goto_clause_or_continuation();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, gosub, target) { return gosubWithContinuation(gosub,target); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            result0 = parse_gosub_clause();
            if (result0 !== null) {
              result0 = (function(offset, line, column, gosub) { return gosubWithContinuation(gosub,"defaultContinuation"); })(pos0.offset, pos0.line, pos0.column, result0);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              if (input.substr(pos.offset, 9) === "#CONTINUE") {
                result0 = "#CONTINUE";
                advance(pos, 9);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"#CONTINUE\"");
                }
              }
              if (result0 !== null) {
                result1 = parse_spc();
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column) { return "funkscene.continuationScene()"; })(pos0.offset, pos0.line, pos0.column);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 5) === "#BACK") {
                  result0 = "#BACK";
                  advance(pos, 5);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"#BACK\"");
                  }
                }
                if (result0 !== null) {
                  result1 = parse_spc();
                  if (result1 !== null) {
                    result0 = [result0, result1];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
                if (result0 !== null) {
                  result0 = (function(offset, line, column) { return "funkscene.previousScene"; })(pos0.offset, pos0.line, pos0.column);
                }
                if (result0 === null) {
                  pos = clone(pos0);
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_gosub_clause() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 6) === "#GOSUB") {
          result0 = "#GOSUB";
          advance(pos, 6);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#GOSUB\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_spc();
          if (result1 !== null) {
            result2 = parse_symbol_or_scene();
            if (result2 !== null) {
              result3 = parse_spc();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, subr) { return subr; })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_goto_clause_or_continuation() {
        var result0;
        
        result0 = parse_goto_clause();
        if (result0 === null) {
          result0 = parse_scene_body();
        }
        return result0;
      }
      
      function parse_symbol_or_scene() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 8) === "#CURRENT") {
          result0 = "#CURRENT";
          advance(pos, 8);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#CURRENT\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) { return "funkscene.currentScene"; })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          if (input.substr(pos.offset, 9) === "#PREVIOUS") {
            result0 = "#PREVIOUS";
            advance(pos, 9);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"#PREVIOUS\"");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column) { return "funkscene.previousScene"; })(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 40) {
              result0 = "(";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"(\"");
              }
            }
            if (result0 !== null) {
              result1 = parse_code();
              if (result1 !== null) {
                if (input.charCodeAt(pos.offset) === 41) {
                  result2 = ")";
                  advance(pos, 1);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\")\"");
                  }
                }
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, expr) { return expr; })(pos0.offset, pos0.line, pos0.column, result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              result0 = parse_symbol();
              if (result0 === null) {
                result0 = parse_scene();
              }
            }
          }
        }
        return result0;
      }
      
      function parse_choice() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 7) === "#CHOOSE") {
          result0 = "#CHOOSE";
          advance(pos, 7);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#CHOOSE\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_spc();
          if (result1 !== null) {
            result2 = parse_nonempty_quoted_text();
            if (result2 !== null) {
              if (input.substr(pos.offset, 4) === "#FOR") {
                result3 = "#FOR";
                advance(pos, 4);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"#FOR\"");
                }
              }
              if (result3 !== null) {
                result4 = parse_spc();
                if (result4 !== null) {
                  result5 = parse_symbol_or_scene();
                  if (result5 !== null) {
                    result6 = parse_spc();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, choice_desc, target) { return [choice_desc, target]; })(pos0.offset, pos0.line, pos0.column, result0[2], result0[5]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_choose_expr() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = clone(pos);
        result0 = parse_choice();
        if (result0 !== null) {
          result0 = (function(offset, line, column, c) { return "[" + c + "]"; })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 9) === "#SECRETLY") {
            result0 = "#SECRETLY";
            advance(pos, 9);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"#SECRETLY\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_spc();
            if (result1 !== null) {
              if (input.substr(pos.offset, 3) === "#IF") {
                result2 = "#IF";
                advance(pos, 3);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"#IF\"");
                }
              }
              if (result2 !== null) {
                result3 = parse_spc();
                if (result3 !== null) {
                  result4 = parse_code();
                  if (result4 !== null) {
                    result5 = parse_choice();
                    if (result5 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, expr, c) { return "((" + expr + ") ? [" + c + "] : [])"; })(pos0.offset, pos0.line, pos0.column, result0[4], result0[5]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.substr(pos.offset, 3) === "#IF") {
              result0 = "#IF";
              advance(pos, 3);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"#IF\"");
              }
            }
            if (result0 !== null) {
              result1 = parse_spc();
              if (result1 !== null) {
                result2 = parse_code();
                if (result2 !== null) {
                  result3 = parse_choice();
                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, expr, c) { return "((" + expr + ") ? [" + c + "] : [" + c[0] + "])"; })(pos0.offset, pos0.line, pos0.column, result0[2], result0[3]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
          }
        }
        return result0;
      }
      
      function parse_qualified_choose_expr() {
        var result0, result1, result2;
        var pos0, pos1;
        
        result0 = parse_choose_expr();
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_onetime_tag_expr();
          if (result0 !== null) {
            result1 = parse_if_expr();
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              result2 = parse_choice();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, tag, cond, c) { var v = "funkscene.namedEventCount[\"" + tag + "\"]";
              c[1] = "(function(){if(typeof " + v + " === 'undefined'){" + v + "=0}" + v + "++;return (" + c[1] + ")();})";
              return "(" + v + " > 0) ? [] : " +
               (((typeof cond === 'undefined') || cond.length == 0) ? ("[" + c + "]") : ("((" + cond + ") ? [" + c + "] : [])")); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_onetime_tag_expr() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 3) === "#AS") {
          result0 = "#AS";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#AS\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_spc();
          if (result1 !== null) {
            result2 = parse_symbol();
            if (result2 !== null) {
              result3 = parse_spc();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, tag) { return tag; })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 5) === "#ONCE") {
            result0 = "#ONCE";
            advance(pos, 5);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"#ONCE\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_spc();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column) { return oneTimeEventPrefix + (++oneTimeCount); })(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_if_expr() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 3) === "#IF") {
          result0 = "#IF";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#IF\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_spc();
          if (result1 !== null) {
            result2 = parse_code();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, expr) { return expr; })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_endscene() {
        var result0;
        
        if (input.substr(pos.offset, 9) === "#ENDSCENE") {
          result0 = "#ENDSCENE";
          advance(pos, 9);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#ENDSCENE\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 4) === "#END") {
            result0 = "#END";
            advance(pos, 4);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"#END\"");
            }
          }
        }
        return result0;
      }
      
      function parse_cycle() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_begin_cycle();
        if (result0 !== null) {
          result1 = parse_single_spc();
          if (result1 !== null) {
            result2 = parse_cycle_list();
            if (result2 !== null) {
              result3 = parse_end_cycle();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, c, cycles, loop_flag) { return "[" + cycles.join(",") + "][" + c + " = ((typeof(" + c + ") === 'undefined') ? 0 : (" + c + " >= " + (cycles.length - 1) + " ? " + (loop_flag ? 0 : (cycles.length - 1)) + " : " + c + " + 1))]"; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_cycle_list() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_postponed_quoted_text();
        if (result0 !== null) {
          if (input.substr(pos.offset, 5) === "#NEXT") {
            result1 = "#NEXT";
            advance(pos, 5);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"#NEXT\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_single_spc();
            if (result2 !== null) {
              result3 = parse_cycle_list();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) { return [head].concat (tail); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_postponed_quoted_text();
          if (result0 !== null) {
            result0 = (function(offset, line, column, last) { return [last]; })(pos0.offset, pos0.line, pos0.column, result0);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_begin_cycle() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 7) === "#CYCLE(") {
          result0 = "#CYCLE(";
          advance(pos, 7);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#CYCLE(\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_spc();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_symbol();
            if (result2 !== null) {
              result3 = parse_spc();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                if (input.charCodeAt(pos.offset) === 41) {
                  result4 = ")";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\")\"");
                  }
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, c) { return c; })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          if (input.substr(pos.offset, 6) === "#CYCLE") {
            result0 = "#CYCLE";
            advance(pos, 6);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"#CYCLE\"");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column) { return cyclePrefix + (++cycleCount); })(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_end_cycle() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 5) === "#LOOP") {
          result0 = "#LOOP";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#LOOP\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) { return 1; })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          if (input.substr(pos.offset, 5) === "#STOP") {
            result0 = "#STOP";
            advance(pos, 5);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"#STOP\"");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column) { return 0; })(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_scene_deque() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 6) === "#STACK") {
          result0 = "#STACK";
          advance(pos, 6);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#STACK\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_spc();
          if (result1 !== null) {
            result2 = parse_symbol_or_scene();
            if (result2 !== null) {
              result3 = parse_spc();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, s) { return "funkscene.sceneDeque.push(" + s + ");"; })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 6) === "#QUEUE") {
            result0 = "#QUEUE";
            advance(pos, 6);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"#QUEUE\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_spc();
            if (result1 !== null) {
              result2 = parse_symbol_or_scene();
              if (result2 !== null) {
                result3 = parse_spc();
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, s) { return "funkscene.sceneDeque.unshift(" + s + ");"; })(pos0.offset, pos0.line, pos0.column, result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.substr(pos.offset, 6) === "#FLUSH") {
              result0 = "#FLUSH";
              advance(pos, 6);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"#FLUSH\"");
              }
            }
            if (result0 !== null) {
              result1 = parse_spc();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column) { return "funkscene.sceneDeque = [];"; })(pos0.offset, pos0.line, pos0.column);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
          }
        }
        return result0;
      }
      
      function parse_wrapped_scene_deque() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_scene_deque();
        if (result0 !== null) {
          result0 = (function(offset, line, column, s) { return "(function(){" + s + ";return\"\";})()"; })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_spc() {
        var result0, result1;
        
        result1 = parse_single_spc();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_single_spc();
          }
        } else {
          result0 = null;
        }
        return result0;
      }
      
      function parse_single_spc() {
        var result0;
        
        if (/^[ \t\n\r]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t\\n\\r]");
          }
        }
        return result0;
      }
      
      function parse_symbol() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[A-Za-z_]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[A-Za-z_]");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[0-9A-Za-z_]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9A-Za-z_]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[0-9A-Za-z_]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9A-Za-z_]");
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, first, rest) { return first + rest.join(""); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_code() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 2) === "##") {
          result0 = "##";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"##\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_code();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, tail) { return "#" + tail; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_code_chars();
          if (result0 !== null) {
            result1 = parse_code();
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, head, tail) { return head + tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_code_chars() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        if (/^[^#]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[^#]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[^#]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[^#]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, chars) { return chars.join(""); })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_postponed_quoted_text() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_quoted_text();
        if (result0 !== null) {
          result0 = (function(offset, line, column, text) { return "(function(){return" + text + ";})()"; })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_nonempty_quoted_text() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_text();
        if (result0 !== null) {
          result0 = (function(offset, line, column, text) { return '"' + text + '"'; })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_quoted_text() {
        var result0;
        var pos0, pos1;
        
        result0 = parse_nonempty_quoted_text();
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = [];
          if (result0 !== null) {
            result0 = (function(offset, line, column) { return '""'; })(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_text() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 2) === "##") {
          result0 = "##";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"##\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_text();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, tail) { return "#" + tail; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_hash_rank();
          if (result0 !== null) {
            result1 = parse_text();
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, rank, tail) { return rank + tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.substr(pos.offset, 2) === "#$") {
              result0 = "#$";
              advance(pos, 2);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"#$\"");
              }
            }
            if (result0 !== null) {
              result1 = parse_symbol();
              if (result1 !== null) {
                result2 = parse_text();
                result2 = result2 !== null ? result2 : "";
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, v, tail) { return "\" + " + v + " + \"" + tail; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              if (input.substr(pos.offset, 2) === "#{") {
                result0 = "#{";
                advance(pos, 2);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"#{\"");
                }
              }
              if (result0 !== null) {
                result1 = parse_code();
                if (result1 !== null) {
                  if (input.substr(pos.offset, 2) === "#}") {
                    result2 = "#}";
                    advance(pos, 2);
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"#}\"");
                    }
                  }
                  if (result2 !== null) {
                    result3 = parse_text();
                    result3 = result3 !== null ? result3 : "";
                    if (result3 !== null) {
                      result0 = [result0, result1, result2, result3];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, code, tail) { return "\" + (function(){return\"\"})((function(){" + code + "})()) + \"" + tail; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[3]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 2) === "#[") {
                  result0 = "#[";
                  advance(pos, 2);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"#[\"");
                  }
                }
                if (result0 !== null) {
                  result1 = parse_code();
                  if (result1 !== null) {
                    if (input.substr(pos.offset, 2) === "#]") {
                      result2 = "#]";
                      advance(pos, 2);
                    } else {
                      result2 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"#]\"");
                      }
                    }
                    if (result2 !== null) {
                      result3 = parse_text();
                      result3 = result3 !== null ? result3 : "";
                      if (result3 !== null) {
                        result0 = [result0, result1, result2, result3];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
                if (result0 !== null) {
                  result0 = (function(offset, line, column, expr, tail) { return "\" + (" + expr + ") + \"" + tail; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[3]);
                }
                if (result0 === null) {
                  pos = clone(pos0);
                }
                if (result0 === null) {
                  pos0 = clone(pos);
                  pos1 = clone(pos);
                  if (input.substr(pos.offset, 5) === "#EVAL") {
                    result0 = "#EVAL";
                    advance(pos, 5);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"#EVAL\"");
                    }
                  }
                  if (result0 !== null) {
                    result1 = parse_spc();
                    if (result1 !== null) {
                      result2 = parse_code();
                      if (result2 !== null) {
                        if (input.substr(pos.offset, 5) === "#TEXT") {
                          result3 = "#TEXT";
                          advance(pos, 5);
                        } else {
                          result3 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"#TEXT\"");
                          }
                        }
                        if (result3 !== null) {
                          result4 = parse_single_spc();
                          if (result4 !== null) {
                            result5 = parse_text();
                            result5 = result5 !== null ? result5 : "";
                            if (result5 !== null) {
                              result0 = [result0, result1, result2, result3, result4, result5];
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, line, column, expr, tail) { return "\" + (" + expr + ") + \"" + tail; })(pos0.offset, pos0.line, pos0.column, result0[2], result0[5]);
                  }
                  if (result0 === null) {
                    pos = clone(pos0);
                  }
                  if (result0 === null) {
                    pos0 = clone(pos);
                    pos1 = clone(pos);
                    result0 = parse_cycle();
                    if (result0 !== null) {
                      result1 = parse_text();
                      result1 = result1 !== null ? result1 : "";
                      if (result1 !== null) {
                        result0 = [result0, result1];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                    if (result0 !== null) {
                      result0 = (function(offset, line, column, c, tail) { return "\" + (" + c + ") + \"" + tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                    }
                    if (result0 === null) {
                      pos = clone(pos0);
                    }
                    if (result0 === null) {
                      pos0 = clone(pos);
                      pos1 = clone(pos);
                      result0 = parse_wrapped_scene_deque();
                      if (result0 !== null) {
                        result1 = parse_text();
                        result1 = result1 !== null ? result1 : "";
                        if (result1 !== null) {
                          result0 = [result0, result1];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                      if (result0 !== null) {
                        result0 = (function(offset, line, column, s, tail) { return "\" + (" + c + ") + \"" + tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                      }
                      if (result0 === null) {
                        pos = clone(pos0);
                      }
                      if (result0 === null) {
                        pos0 = clone(pos);
                        pos1 = clone(pos);
                        if (input.charCodeAt(pos.offset) === 34) {
                          result0 = "\"";
                          advance(pos, 1);
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"\\\"\"");
                          }
                        }
                        if (result0 !== null) {
                          result1 = parse_text();
                          result1 = result1 !== null ? result1 : "";
                          if (result1 !== null) {
                            result0 = [result0, result1];
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                        if (result0 !== null) {
                          result0 = (function(offset, line, column, tail) { return '\\"' + tail; })(pos0.offset, pos0.line, pos0.column, result0[1]);
                        }
                        if (result0 === null) {
                          pos = clone(pos0);
                        }
                        if (result0 === null) {
                          pos0 = clone(pos);
                          pos1 = clone(pos);
                          if (input.charCodeAt(pos.offset) === 10) {
                            result0 = "\n";
                            advance(pos, 1);
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"\\n\"");
                            }
                          }
                          if (result0 !== null) {
                            result1 = parse_text();
                            result1 = result1 !== null ? result1 : "";
                            if (result1 !== null) {
                              result0 = [result0, result1];
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                          if (result0 !== null) {
                            result0 = (function(offset, line, column, tail) { return '\\n' + tail; })(pos0.offset, pos0.line, pos0.column, result0[1]);
                          }
                          if (result0 === null) {
                            pos = clone(pos0);
                          }
                          if (result0 === null) {
                            pos0 = clone(pos);
                            pos1 = clone(pos);
                            result0 = parse_text_chars();
                            if (result0 !== null) {
                              result1 = parse_text();
                              result1 = result1 !== null ? result1 : "";
                              if (result1 !== null) {
                                result0 = [result0, result1];
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                            if (result0 !== null) {
                              result0 = (function(offset, line, column, head, tail) { return head + tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                            }
                            if (result0 === null) {
                              pos = clone(pos0);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_hash_rank() {
        var result0;
        
        if (input.substr(pos.offset, 2) === "#!") {
          result0 = "#!";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#!\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 2) === "#0") {
            result0 = "#0";
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"#0\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos.offset, 2) === "#1") {
              result0 = "#1";
              advance(pos, 2);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"#1\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos.offset, 2) === "#2") {
                result0 = "#2";
                advance(pos, 2);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"#2\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos.offset, 2) === "#3") {
                  result0 = "#3";
                  advance(pos, 2);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"#3\"");
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos.offset, 2) === "#4") {
                    result0 = "#4";
                    advance(pos, 2);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"#4\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.substr(pos.offset, 2) === "#5") {
                      result0 = "#5";
                      advance(pos, 2);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"#5\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.substr(pos.offset, 2) === "#6") {
                        result0 = "#6";
                        advance(pos, 2);
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"#6\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.substr(pos.offset, 2) === "#7") {
                          result0 = "#7";
                          advance(pos, 2);
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"#7\"");
                          }
                        }
                        if (result0 === null) {
                          if (input.substr(pos.offset, 2) === "#8") {
                            result0 = "#8";
                            advance(pos, 2);
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"#8\"");
                            }
                          }
                          if (result0 === null) {
                            if (input.substr(pos.offset, 2) === "#9") {
                              result0 = "#9";
                              advance(pos, 2);
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"#9\"");
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_text_chars() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        if (/^[^#"\n]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[^#\"\\n]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[^#"\n]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[^#\"\\n]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, chars) { return chars.join(""); })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      
      
        function sceneFunction(continuation,includes,scene_desc,choices) {
            var f = "(function() {\n";
            if (typeof(continuation) != 'undefined') {
                f += "var defaultContinuation = function(){defaultContinuation=undefined;return(" + continuation + ")();};\n";
            }
            f += "var __t=\"\",__c=[],__tc;\n";
            if (typeof(includes) != 'undefined') {
                for (var i = 0; i < includes.length; ++i) {
      	      var text = includes[i][0], incl = includes[i][1];
      	      if (typeof(text) != 'undefined') { f += "__t+=" + text + ";\n"; }
      	      if (typeof(incl) != 'undefined') { f += "__tc=(" + incl + ")();\n__t+=__tc[0];\n__c=__c.concat(__tc[1]);\n"; }
      	  }
            }
            f += "__t+=" + scene_desc + ";\n";
            f += "__c=__c.concat(" + renderList(choices) + ");\n";
            f += "return [__t,__c];})";
      
            return f;
        }
      
        function renderList(x) {
            if (typeof x === 'string') {
                return x;
            } else {
                return "[" + x.join(",") + "]";
            }
        }
      
        function joinScenes(scenes) {
            return "(function(){return funkscene.joinScenes([" + scenes.join(",") + "]);})";	
        }
      
        function makeGoto (target) {
            return "[\"\", " + target + "]";
        }
      
        function gotoIfDefined(x) {
            return "(typeof(" + x + ") === 'undefined' ? [] : [\"\", " + x + "])";
        }
      
        function gosubWithContinuation(subroutine,continuation) {
            return "(function(){funkscene.sceneDeque.push(" + continuation + ");return(" + subroutine + ")();})";
        }
      
        function makeAssignment(name,scene) {
            return name + " = " + scene + ";\n";
        }
      
        function makeInput(prompt,target,var_name) {
            return ["[" + prompt + ", " + target + ", \"" + var_name + "\"]"];
        }
      
        var oneTimeCount = 0;
        var oneTimeEventPrefix = "once";
        var cycleCount = 0;
        var cyclePrefix = "cycle";
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos.offset === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos.offset < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos.offset === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos.offset !== input.length) {
        var offset = Math.max(pos.offset, rightmostFailuresPos.offset);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = pos.offset > rightmostFailuresPos.offset ? pos : rightmostFailuresPos;
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
