FunkScene.graphGenerator = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "start": parse_start,
        "body": parse_body,
        "named_scene_assignment": parse_named_scene_assignment,
        "named_scene": parse_named_scene,
        "inline_named_scene_assignment": parse_inline_named_scene_assignment,
        "named_scene_body": parse_named_scene_body,
        "gosub_chain": parse_gosub_chain,
        "scene": parse_scene,
        "scene_body": parse_scene_body,
        "include": parse_include,
        "conjunctive_choice_list": parse_conjunctive_choice_list,
        "choice_list": parse_choice_list,
        "explicit_or_implicit_continuation": parse_explicit_or_implicit_continuation,
        "basic_goto_clause": parse_basic_goto_clause,
        "goto_clause": parse_goto_clause,
        "gosub_clause": parse_gosub_clause,
        "goto_clause_or_continuation": parse_goto_clause_or_continuation,
        "symbol_or_scene": parse_symbol_or_scene,
        "choice": parse_choice,
        "choose_expr": parse_choose_expr,
        "qualified_choose_expr": parse_qualified_choose_expr,
        "onetime_tag_expr": parse_onetime_tag_expr,
        "inc_event_count": parse_inc_event_count,
        "reset_event_count": parse_reset_event_count,
        "query_event_count": parse_query_event_count,
        "status_badges": parse_status_badges,
        "status_badge": parse_status_badge,
        "status_if_expr": parse_status_if_expr,
        "icon_filename": parse_icon_filename,
        "meter_bars": parse_meter_bars,
        "meter_bar": parse_meter_bar,
        "meter_bar_max_clause": parse_meter_bar_max_clause,
        "meter_bar_unit_clause": parse_meter_bar_unit_clause,
        "meter_bar_color_clause": parse_meter_bar_color_clause,
        "meter_bar_color": parse_meter_bar_color,
        "status_condition": parse_status_condition,
        "if_expr": parse_if_expr,
        "if_then_else": parse_if_then_else,
        "if_body": parse_if_body,
        "else_clause": parse_else_clause,
        "scene_text_or_goto": parse_scene_text_or_goto,
        "inline_if_then_else": parse_inline_if_then_else,
        "inline_if_body": parse_inline_if_body,
        "inline_else_clause": parse_inline_else_clause,
        "cycle": parse_cycle,
        "cycle_list": parse_cycle_list,
        "begin_cycle": parse_begin_cycle,
        "end_cycle": parse_end_cycle,
        "scene_scheduling_statement": parse_scene_scheduling_statement,
        "spc": parse_spc,
        "symbol": parse_symbol,
        "symbol_tail": parse_symbol_tail,
        "symbol_chars": parse_symbol_chars,
        "balanced_code": parse_balanced_code,
        "balanced_code_chars": parse_balanced_code_chars,
        "code": parse_code,
        "code_chars": parse_code_chars,
        "statement": parse_statement,
        "statements": parse_statements,
        "postponed_quoted_text": parse_postponed_quoted_text,
        "nonempty_quoted_text": parse_nonempty_quoted_text,
        "text": parse_text,
        "scene_text": parse_scene_text,
        "hash_run": parse_hash_run,
        "encoded_spc": parse_encoded_spc,
        "hash_rank": parse_hash_rank,
        "text_chars": parse_text_chars,
        "comment": parse_comment,
        "multi_line_comment": parse_multi_line_comment,
        "multi_line_comment_no_line_terminator": parse_multi_line_comment_no_line_terminator,
        "single_line_comment": parse_single_line_comment,
        "line_terminator": parse_line_terminator,
        "source_character": parse_source_character,
        "named_minigame_scene": parse_named_minigame_scene,
        "quoted_cazoo_code": parse_quoted_cazoo_code,
        "cazoo_code": parse_cazoo_code,
        "cazoo_code_chars": parse_cazoo_code_chars,
        "cazoo_intro_text": parse_cazoo_intro_text
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = { offset: 0, line: 1, column: 1, seenCR: false };
      var reportFailures = 0;
      var rightmostFailuresPos = { offset: 0, line: 1, column: 1, seenCR: false };
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function clone(object) {
        var result = {};
        for (var key in object) {
          result[key] = object[key];
        }
        return result;
      }
      
      function advance(pos, n) {
        var endOffset = pos.offset + n;
        
        for (var offset = pos.offset; offset < endOffset; offset++) {
          var ch = input.charAt(offset);
          if (ch === "\n") {
            if (!pos.seenCR) { pos.line++; }
            pos.column = 1;
            pos.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            pos.line++;
            pos.column = 1;
            pos.seenCR = true;
          } else {
            pos.column++;
            pos.seenCR = false;
          }
        }
        
        pos.offset += n;
      }
      
      function matchFailed(failure) {
        if (pos.offset < rightmostFailuresPos.offset) {
          return;
        }
        
        if (pos.offset > rightmostFailuresPos.offset) {
          rightmostFailuresPos = clone(pos);
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_body();
        if (result0 !== null) {
          result0 = (function(offset, line, column) { return makeGEXF(); })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_body() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_named_scene_assignment();
        if (result0 !== null) {
          result1 = parse_body();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_named_minigame_scene();
          if (result0 !== null) {
            result1 = parse_body();
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            result0 = parse_scene();
            if (result0 !== null) {
              result1 = parse_body();
              result1 = result1 !== null ? result1 : "";
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              result0 = parse_qualified_choose_expr();
              if (result0 !== null) {
                result1 = parse_body();
                result1 = result1 !== null ? result1 : "";
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
              } else {
                result0 = null;
                pos = clone(pos0);
              }
              if (result0 === null) {
                pos0 = clone(pos);
                result0 = parse_code();
                if (result0 !== null) {
                  result1 = parse_body();
                  result1 = result1 !== null ? result1 : "";
                  if (result1 !== null) {
                    result0 = [result0, result1];
                  } else {
                    result0 = null;
                    pos = clone(pos0);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_named_scene_assignment() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 5) === "#PAGE") {
          result0 = "#PAGE";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#PAGE\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_spc();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_spc();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_symbol();
            if (result2 !== null) {
              result4 = parse_spc();
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse_spc();
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result4 = (function(offset, line, column, name) {return setPageName(name);})(pos.offset, pos.line, pos.column, result2) ? "" : null;
                if (result4 !== null) {
                  result5 = parse_named_scene();
                  if (result5 !== null) {
                    result6 = (function(offset, line, column, name, scene) {return resetPageName();})(pos.offset, pos.line, pos.column, result2, result5) ? "" : null;
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name, scene) { return makeAssignment (name, scene); })(pos0.offset, pos0.line, pos0.column, result0[2], result0[5]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_named_scene() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 6) === "#SCENE") {
          result0 = "#SCENE";
          advance(pos, 6);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#SCENE\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_spc();
          if (result1 !== null) {
            result2 = (function(offset, line, column) {return startScene(line,column);})(pos.offset, pos.line, pos.column) ? "" : null;
            if (result2 !== null) {
              result3 = parse_named_scene_body();
              if (result3 !== null) {
                if (input.substr(pos.offset, 9) === "#ENDSCENE") {
                  result4 = "#ENDSCENE";
                  advance(pos, 9);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"#ENDSCENE\"");
                  }
                }
                if (result4 !== null) {
                  result5 = (function(offset, line, column, s) {return endScene();})(pos.offset, pos.line, pos.column, result3) ? "" : null;
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, s) { return s; })(pos0.offset, pos0.line, pos0.column, result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 2) === "#(") {
            result0 = "#(";
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"#(\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_spc();
            if (result1 !== null) {
              result2 = (function(offset, line, column) {return startScene(line,column);})(pos.offset, pos.line, pos.column) ? "" : null;
              if (result2 !== null) {
                result3 = parse_named_scene_body();
                if (result3 !== null) {
                  if (input.substr(pos.offset, 2) === "#)") {
                    result4 = "#)";
                    advance(pos, 2);
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"#)\"");
                    }
                  }
                  if (result4 !== null) {
                    result5 = (function(offset, line, column, s) {return endScene();})(pos.offset, pos.line, pos.column, result3) ? "" : null;
                    if (result5 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, s) { return s; })(pos0.offset, pos0.line, pos0.column, result0[3]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_inline_named_scene_assignment() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 5) === "#PAGE") {
          result0 = "#PAGE";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#PAGE\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_spc();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_spc();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_symbol();
            if (result2 !== null) {
              result4 = parse_spc();
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse_spc();
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result4 = (function(offset, line, column, name) {return setPageName(name);})(pos.offset, pos.line, pos.column, result2) ? "" : null;
                if (result4 !== null) {
                  result5 = parse_named_scene_body();
                  if (result5 !== null) {
                    result6 = (function(offset, line, column, name, scene) {return resetPageName();})(pos.offset, pos.line, pos.column, result2, result5) ? "" : null;
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name, scene) { return [name, makeAssignment (name, scene)]; })(pos0.offset, pos0.line, pos0.column, result0[2], result0[5]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_named_scene_body() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_include();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_include();
        }
        if (result0 !== null) {
          result1 = parse_scene_text();
          if (result1 !== null) {
            result2 = parse_conjunctive_choice_list();
            if (result2 !== null) {
              result3 = parse_inline_named_scene_assignment();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, incl, scene_desc, choices, cont) { return sceneFunction (cont[0], incl, scene_desc, choices) + cont[1]; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = [];
          result1 = parse_include();
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_include();
          }
          if (result0 !== null) {
            result1 = parse_scene_text();
            if (result1 !== null) {
              result2 = parse_gosub_chain();
              if (result2 !== null) {
                result3 = parse_inline_named_scene_assignment();
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, incl, scene_desc, gosubs, cont) { return sceneFunction (cont[0], incl, scene_desc, gosubs) + cont[1]; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = [];
            result1 = parse_include();
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_include();
            }
            if (result0 !== null) {
              result1 = parse_scene_text();
              if (result1 !== null) {
                result2 = parse_inline_named_scene_assignment();
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, incl, scene_desc, cont) { return sceneFunction (cont[0], incl, scene_desc, [makeGoto(defaultContinuation())]) + cont[1]; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              result0 = parse_scene_body();
            }
          }
        }
        return result0;
      }
      
      function parse_gosub_chain() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_gosub_clause();
        if (result0 !== null) {
          result1 = parse_gosub_chain();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, subr, chain) { return gosubWithContinuation(subr,chain); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_gosub_clause();
          if (result0 !== null) {
            result0 = (function(offset, line, column, subr) { return gosubWithDefaultContinuation(subr); })(pos0.offset, pos0.line, pos0.column, result0);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_scene() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 6) === "#SCENE") {
          result0 = "#SCENE";
          advance(pos, 6);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#SCENE\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_spc();
          if (result1 !== null) {
            result2 = (function(offset, line, column) {return startScene(line,column);})(pos.offset, pos.line, pos.column) ? "" : null;
            if (result2 !== null) {
              result3 = parse_scene_body();
              if (result3 !== null) {
                if (input.substr(pos.offset, 9) === "#ENDSCENE") {
                  result4 = "#ENDSCENE";
                  advance(pos, 9);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"#ENDSCENE\"");
                  }
                }
                if (result4 !== null) {
                  result5 = (function(offset, line, column, s) {return endScene();})(pos.offset, pos.line, pos.column, result3) ? "" : null;
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, s) { return s; })(pos0.offset, pos0.line, pos0.column, result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 2) === "#(") {
            result0 = "#(";
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"#(\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_spc();
            if (result1 !== null) {
              result2 = (function(offset, line, column) {return startScene(line,column);})(pos.offset, pos.line, pos.column) ? "" : null;
              if (result2 !== null) {
                result3 = parse_scene_body();
                if (result3 !== null) {
                  if (input.substr(pos.offset, 2) === "#)") {
                    result4 = "#)";
                    advance(pos, 2);
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"#)\"");
                    }
                  }
                  if (result4 !== null) {
                    result5 = (function(offset, line, column, s) {return endScene();})(pos.offset, pos.line, pos.column, result3) ? "" : null;
                    if (result5 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, s) { return s; })(pos0.offset, pos0.line, pos0.column, result0[3]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_scene_body() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_include();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_include();
        }
        if (result0 !== null) {
          result1 = parse_scene_text();
          if (result1 !== null) {
            result2 = parse_conjunctive_choice_list();
            if (result2 !== null) {
              result3 = parse_explicit_or_implicit_continuation();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, incl, scene_desc, choices, cont) { return sceneFunction (cont, incl, scene_desc, choices); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = [];
          result1 = parse_include();
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_include();
          }
          if (result0 !== null) {
            result1 = parse_scene_text();
            if (result1 !== null) {
              if (input.substr(pos.offset, 6) === "#BREAK") {
                result2 = "#BREAK";
                advance(pos, 6);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"#BREAK\"");
                }
              }
              if (result2 !== null) {
                result3 = parse_spc();
                if (result3 !== null) {
                  result4 = parse_scene_body();
                  if (result4 !== null) {
                    result0 = [result0, result1, result2, result3, result4];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, incl, scene_desc, cont) { return sceneFunction (cont, incl, scene_desc, [continueIfDefined()]); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[4]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = [];
            result1 = parse_include();
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_include();
            }
            if (result0 !== null) {
              result1 = parse_scene_text();
              if (result1 !== null) {
                result2 = parse_choice_list();
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, incl, scene_desc, choices) { return sceneFunction (undefined, incl, scene_desc, choices); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
          }
        }
        return result0;
      }
      
      function parse_include() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_scene_text();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          if (input.substr(pos.offset, 8) === "#INCLUDE") {
            result1 = "#INCLUDE";
            advance(pos, 8);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"#INCLUDE\"");
            }
          }
          if (result1 !== null) {
            result3 = parse_spc();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_spc();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result3 = parse_symbol_or_scene();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, scene_desc, included) { return [scene_desc,included]; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_conjunctive_choice_list() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 6) === "#INPUT") {
          result0 = "#INPUT";
          advance(pos, 6);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#INPUT\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_spc();
          if (result1 !== null) {
            result2 = parse_nonempty_quoted_text();
            if (result2 !== null) {
              if (input.substr(pos.offset, 3) === "#TO") {
                result3 = "#TO";
                advance(pos, 3);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"#TO\"");
                }
              }
              if (result3 !== null) {
                result4 = parse_spc();
                if (result4 !== null) {
                  result5 = parse_symbol();
                  if (result5 !== null) {
                    result7 = parse_spc();
                    if (result7 !== null) {
                      result6 = [];
                      while (result7 !== null) {
                        result6.push(result7);
                        result7 = parse_spc();
                      }
                    } else {
                      result6 = null;
                    }
                    if (result6 !== null) {
                      result7 = parse_goto_clause_or_continuation();
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, prompt, var_name, target) { return makeInput (prompt, target, var_name); })(pos0.offset, pos0.line, pos0.column, result0[2], result0[5], result0[7]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_if_expr();
          if (result0 !== null) {
            result1 = parse_basic_goto_clause();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, cond, target) { return [makeGoto(target), continueIfDefined()]; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            result1 = parse_qualified_choose_expr();
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_qualified_choose_expr();
              }
            } else {
              result0 = null;
            }
          }
        }
        return result0;
      }
      
      function parse_choice_list() {
        var result0, result1, result2;
        var pos0, pos1;
        
        result0 = parse_conjunctive_choice_list();
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_goto_clause();
          if (result0 !== null) {
            result0 = (function(offset, line, column, target) { return [makeGoto (target)]; })(pos0.offset, pos0.line, pos0.column, result0);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.substr(pos.offset, 5) === "#OVER") {
              result0 = "#OVER";
              advance(pos, 5);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"#OVER\"");
              }
            }
            if (result0 !== null) {
              result2 = parse_spc();
              if (result2 !== null) {
                result1 = [];
                while (result2 !== null) {
                  result1.push(result2);
                  result2 = parse_spc();
                }
              } else {
                result1 = null;
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column) { return []; })(pos0.offset, pos0.line, pos0.column);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              result0 = [];
              if (result0 !== null) {
                result0 = (function(offset, line, column) { return [continueIfDefined()]; })(pos0.offset, pos0.line, pos0.column);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
            }
          }
        }
        return result0;
      }
      
      function parse_explicit_or_implicit_continuation() {
        var result0;
        
        result0 = parse_basic_goto_clause();
        if (result0 === null) {
          result0 = parse_scene_body();
        }
        return result0;
      }
      
      function parse_basic_goto_clause() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 5) === "#GOTO") {
          result0 = "#GOTO";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#GOTO\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_spc();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_spc();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_symbol_or_scene();
            if (result2 !== null) {
              result4 = parse_spc();
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse_spc();
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, target) { return target; })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_goto_clause() {
        var result0, result1;
        var pos0, pos1;
        
        result0 = parse_basic_goto_clause();
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_gosub_clause();
          if (result0 !== null) {
            result1 = parse_goto_clause_or_continuation();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, gosub, target) { return gosubWithContinuation(gosub,target); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            result0 = parse_gosub_clause();
            if (result0 !== null) {
              result0 = (function(offset, line, column, gosub) { return gosubWithDefaultContinuation(gosub); })(pos0.offset, pos0.line, pos0.column, result0);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              if (input.substr(pos.offset, 9) === "#CONTINUE") {
                result0 = "#CONTINUE";
                advance(pos, 9);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"#CONTINUE\"");
                }
              }
              if (result0 !== null) {
                result1 = parse_spc();
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column) { return defaultContinuation(); })(pos0.offset, pos0.line, pos0.column);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 5) === "#BACK") {
                  result0 = "#BACK";
                  advance(pos, 5);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"#BACK\"");
                  }
                }
                if (result0 !== null) {
                  result1 = parse_spc();
                  if (result1 !== null) {
                    result0 = [result0, result1];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
                if (result0 !== null) {
                  result0 = (function(offset, line, column) { ++canGoBack[currentScene()]; return undefined; })(pos0.offset, pos0.line, pos0.column);
                }
                if (result0 === null) {
                  pos = clone(pos0);
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_gosub_clause() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 6) === "#GOSUB") {
          result0 = "#GOSUB";
          advance(pos, 6);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#GOSUB\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_spc();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_spc();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_symbol_or_scene();
            if (result2 !== null) {
              result4 = parse_spc();
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse_spc();
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, subr) { return subr; })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_goto_clause_or_continuation() {
        var result0;
        
        result0 = parse_goto_clause();
        if (result0 === null) {
          result0 = parse_scene_body();
        }
        return result0;
      }
      
      function parse_symbol_or_scene() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 8) === "#CURRENT") {
          result0 = "#CURRENT";
          advance(pos, 8);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#CURRENT\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) { return currentScene(); })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          if (input.substr(pos.offset, 9) === "#PREVIOUS") {
            result0 = "#PREVIOUS";
            advance(pos, 9);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"#PREVIOUS\"");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column) { ++canGoBack[currentScene()]; return undefined; })(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 40) {
              result0 = "(";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"(\"");
              }
            }
            if (result0 !== null) {
              result1 = parse_balanced_code();
              if (result1 !== null) {
                if (input.charCodeAt(pos.offset) === 41) {
                  result2 = ")";
                  advance(pos, 1);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\")\"");
                  }
                }
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, expr) { return expr; })(pos0.offset, pos0.line, pos0.column, result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              result0 = parse_symbol();
              if (result0 === null) {
                result0 = parse_scene();
              }
            }
          }
        }
        return result0;
      }
      
      function parse_choice() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 7) === "#CHOOSE") {
          result0 = "#CHOOSE";
          advance(pos, 7);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#CHOOSE\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_spc();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_spc();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_nonempty_quoted_text();
            if (result2 !== null) {
              if (input.substr(pos.offset, 4) === "#FOR") {
                result3 = "#FOR";
                advance(pos, 4);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"#FOR\"");
                }
              }
              if (result3 !== null) {
                result5 = parse_spc();
                if (result5 !== null) {
                  result4 = [];
                  while (result5 !== null) {
                    result4.push(result5);
                    result5 = parse_spc();
                  }
                } else {
                  result4 = null;
                }
                if (result4 !== null) {
                  result5 = parse_symbol_or_scene();
                  if (result5 !== null) {
                    result6 = parse_spc();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, choice_desc, target) { return [choice_desc, target]; })(pos0.offset, pos0.line, pos0.column, result0[2], result0[5]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_choose_expr() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        result0 = parse_choice();
        if (result0 !== null) {
          result0 = (function(offset, line, column, c) { return c; })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 9) === "#SECRETLY") {
            result0 = "#SECRETLY";
            advance(pos, 9);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"#SECRETLY\"");
            }
          }
          if (result0 !== null) {
            result2 = parse_spc();
            if (result2 !== null) {
              result1 = [];
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_spc();
              }
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              result2 = parse_if_expr();
              if (result2 !== null) {
                result3 = parse_choice();
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, expr, c) { return c; })(pos0.offset, pos0.line, pos0.column, result0[2], result0[3]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_if_expr();
            if (result0 !== null) {
              result1 = parse_choice();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, expr, c) { return c; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
          }
        }
        return result0;
      }
      
      function parse_qualified_choose_expr() {
        var result0, result1, result2;
        var pos0, pos1;
        
        result0 = parse_choose_expr();
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_onetime_tag_expr();
          if (result0 !== null) {
            result1 = parse_if_expr();
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              result2 = parse_choice();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, tag, cond, c) { return c; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_onetime_tag_expr() {
        var result0, result1, result2, result3, result4;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 3) === "#AS") {
          result0 = "#AS";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#AS\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_spc();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_spc();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_symbol();
            if (result2 !== null) {
              result4 = parse_spc();
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse_spc();
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          if (input.substr(pos.offset, 5) === "#ONCE") {
            result0 = "#ONCE";
            advance(pos, 5);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"#ONCE\"");
            }
          }
          if (result0 !== null) {
            result2 = parse_spc();
            if (result2 !== null) {
              result1 = [];
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_spc();
              }
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_inc_event_count() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 8) === "#ACHIEVE") {
          result0 = "#ACHIEVE";
          advance(pos, 8);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#ACHIEVE\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_spc();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_spc();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_symbol();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_reset_event_count() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 5) === "#FAIL") {
          result0 = "#FAIL";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#FAIL\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_spc();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_spc();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_symbol();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_query_event_count() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 9) === "#ACHIEVED") {
          result0 = "#ACHIEVED";
          advance(pos, 9);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#ACHIEVED\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_spc();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_spc();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_symbol();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_status_badges() {
        var result0, result1;
        
        result1 = parse_status_badge();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_status_badge();
          }
        } else {
          result0 = null;
        }
        return result0;
      }
      
      function parse_status_badge() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 5) === "#SHOW") {
          result0 = "#SHOW";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#SHOW\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_spc();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_spc();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_icon_filename();
            if (result2 !== null) {
              result4 = parse_spc();
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse_spc();
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                if (input.substr(pos.offset, 6) === "#BADGE") {
                  result4 = "#BADGE";
                  advance(pos, 6);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"#BADGE\"");
                  }
                }
                if (result4 !== null) {
                  result5 = parse_spc();
                  if (result5 !== null) {
                    result6 = parse_nonempty_quoted_text();
                    if (result6 !== null) {
                      result7 = parse_status_if_expr();
                      if (result7 !== null) {
                        result8 = parse_spc();
                        if (result8 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result0 = null;
                          pos = clone(pos0);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos0);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos0);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos0);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_status_if_expr() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 3) === "#IF") {
          result0 = "#IF";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#IF\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_spc();
          if (result1 !== null) {
            result2 = parse_status_condition();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 4) === "#NOW") {
            result0 = "#NOW";
            advance(pos, 4);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"#NOW\"");
            }
          }
        }
        return result0;
      }
      
      function parse_icon_filename() {
        var result0, result1;
        
        if (/^[A-Za-z0-9\-_]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[A-Za-z0-9\\-_]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[A-Za-z0-9\-_]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[A-Za-z0-9\\-_]");
              }
            }
          }
        } else {
          result0 = null;
        }
        return result0;
      }
      
      function parse_meter_bars() {
        var result0, result1;
        
        result1 = parse_meter_bar();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_meter_bar();
          }
        } else {
          result0 = null;
        }
        return result0;
      }
      
      function parse_meter_bar() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 4) === "#BAR") {
          result0 = "#BAR";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#BAR\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_nonempty_quoted_text();
          if (result1 !== null) {
            if (input.substr(pos.offset, 6) === "#VALUE") {
              result2 = "#VALUE";
              advance(pos, 6);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"#VALUE\"");
              }
            }
            if (result2 !== null) {
              result4 = parse_spc();
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse_spc();
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result4 = parse_balanced_code();
                if (result4 !== null) {
                  result5 = parse_meter_bar_max_clause();
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    result6 = parse_meter_bar_unit_clause();
                    if (result6 !== null) {
                      result7 = parse_meter_bar_color_clause();
                      result7 = result7 !== null ? result7 : "";
                      if (result7 !== null) {
                        if (input.substr(pos.offset, 7) === "#ENDBAR") {
                          result8 = "#ENDBAR";
                          advance(pos, 7);
                        } else {
                          result8 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"#ENDBAR\"");
                          }
                        }
                        if (result8 !== null) {
                          result9 = parse_spc();
                          if (result9 !== null) {
                            result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9];
                          } else {
                            result0 = null;
                            pos = clone(pos0);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos0);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos0);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos0);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos0);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_meter_bar_max_clause() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 4) === "#MAX") {
          result0 = "#MAX";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#MAX\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_spc();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_spc();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_balanced_code();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_meter_bar_unit_clause() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 7) === "#UNITS/") {
          result0 = "#UNITS/";
          advance(pos, 7);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#UNITS/\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_text();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          if (input.substr(pos.offset, 6) === "#UNITS") {
            result0 = "#UNITS";
            advance(pos, 6);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"#UNITS\"");
            }
          }
          if (result0 !== null) {
            result2 = parse_spc();
            if (result2 !== null) {
              result1 = [];
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_spc();
              }
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              result2 = parse_text();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            result0 = [];
          }
        }
        return result0;
      }
      
      function parse_meter_bar_color_clause() {
        var result0, result1, result2, result3, result4;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 6) === "#COLOR") {
          result0 = "#COLOR";
          advance(pos, 6);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#COLOR\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_spc();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_spc();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_meter_bar_color();
            if (result2 !== null) {
              result4 = parse_spc();
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse_spc();
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_meter_bar_color() {
        var result0;
        
        if (input.substr(pos.offset, 5) === "green") {
          result0 = "green";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"green\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 6) === "orange") {
            result0 = "orange";
            advance(pos, 6);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"orange\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos.offset, 3) === "red") {
              result0 = "red";
              advance(pos, 3);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"red\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos.offset, 6) === "purple") {
                result0 = "purple";
                advance(pos, 6);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"purple\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos.offset, 4) === "blue") {
                  result0 = "blue";
                  advance(pos, 4);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"blue\"");
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos.offset, 6) === "yellow") {
                    result0 = "yellow";
                    advance(pos, 6);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"yellow\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.substr(pos.offset, 4) === "pink") {
                      result0 = "pink";
                      advance(pos, 4);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"pink\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.substr(pos.offset, 4) === "gray") {
                        result0 = "gray";
                        advance(pos, 4);
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"gray\"");
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_status_condition() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_balanced_code();
        if (result0 !== null) {
          if (input.substr(pos.offset, 4) === "#NOW") {
            result1 = "#NOW";
            advance(pos, 4);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"#NOW\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_balanced_code();
          if (result0 !== null) {
            if (input.substr(pos.offset, 5) === "#EVER") {
              result1 = "#EVER";
              advance(pos, 5);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"#EVER\"");
              }
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
          if (result0 === null) {
            result0 = parse_balanced_code();
          }
        }
        return result0;
      }
      
      function parse_if_expr() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 3) === "#IF") {
          result0 = "#IF";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#IF\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_spc();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_spc();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_balanced_code();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, expr) { return expr; })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_if_then_else() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 3) === "#IF") {
          result0 = "#IF";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#IF\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_spc();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_spc();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_balanced_code();
            if (result2 !== null) {
              result3 = parse_if_body();
              if (result3 !== null) {
                if (input.substr(pos.offset, 6) === "#ENDIF") {
                  result4 = "#ENDIF";
                  advance(pos, 6);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"#ENDIF\"");
                  }
                }
                if (result4 !== null) {
                  result5 = parse_spc();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, cond, then_else) { return makeConditional(cond,then_else[0],then_else[1]); })(pos0.offset, pos0.line, pos0.column, result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_if_body() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 5) === "#THEN") {
          result0 = "#THEN";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#THEN\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_spc();
          if (result1 !== null) {
            result2 = parse_scene_text_or_goto();
            if (result2 !== null) {
              result3 = parse_else_clause();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, true_val, false_val) { return [true_val, false_val]; })(pos0.offset, pos0.line, pos0.column, result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 5) === "#THEN") {
            result0 = "#THEN";
            advance(pos, 5);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"#THEN\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_spc();
            if (result1 !== null) {
              result2 = parse_scene_text_or_goto();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, true_val) { return [true_val, "\"\""]; })(pos0.offset, pos0.line, pos0.column, result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_else_clause() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 5) === "#ELSE") {
          result0 = "#ELSE";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#ELSE\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_spc();
          if (result1 !== null) {
            result2 = parse_scene_text_or_goto();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, text) { return text; })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 6) === "#ELSIF") {
            result0 = "#ELSIF";
            advance(pos, 6);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"#ELSIF\"");
            }
          }
          if (result0 !== null) {
            result2 = parse_spc();
            if (result2 !== null) {
              result1 = [];
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_spc();
              }
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              result2 = parse_balanced_code();
              if (result2 !== null) {
                result3 = parse_if_body();
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, cond, then_else) { return makeConditional(cond,then_else[0],then_else[1]); })(pos0.offset, pos0.line, pos0.column, result0[2], result0[3]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_scene_text_or_goto() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_scene_text();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_goto_clause();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, text, target) { addEdge(currentScene(),target,{choiceType:"goto"}); return text; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          result0 = parse_scene_text();
        }
        return result0;
      }
      
      function parse_inline_if_then_else() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 3) === "#IF") {
          result0 = "#IF";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#IF\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_spc();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_spc();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_balanced_code();
            if (result2 !== null) {
              result3 = parse_inline_if_body();
              if (result3 !== null) {
                if (input.substr(pos.offset, 6) === "#ENDIF") {
                  result4 = "#ENDIF";
                  advance(pos, 6);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"#ENDIF\"");
                  }
                }
                if (result4 !== null) {
                  result5 = parse_spc();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, cond, then_else) { return makeInlineConditional(cond,then_else[0],then_else[1]); })(pos0.offset, pos0.line, pos0.column, result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_inline_if_body() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 5) === "#THEN") {
          result0 = "#THEN";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#THEN\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_spc();
          if (result1 !== null) {
            result2 = parse_nonempty_quoted_text();
            if (result2 !== null) {
              result3 = parse_inline_else_clause();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, true_val, false_val) { return [true_val, false_val]; })(pos0.offset, pos0.line, pos0.column, result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 5) === "#THEN") {
            result0 = "#THEN";
            advance(pos, 5);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"#THEN\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_spc();
            if (result1 !== null) {
              result2 = parse_nonempty_quoted_text();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, true_val) { return [true_val, "\"\""]; })(pos0.offset, pos0.line, pos0.column, result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_inline_else_clause() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 5) === "#ELSE") {
          result0 = "#ELSE";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#ELSE\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_spc();
          if (result1 !== null) {
            result2 = parse_nonempty_quoted_text();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, text) { return text; })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 6) === "#ELSIF") {
            result0 = "#ELSIF";
            advance(pos, 6);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"#ELSIF\"");
            }
          }
          if (result0 !== null) {
            result2 = parse_spc();
            if (result2 !== null) {
              result1 = [];
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_spc();
              }
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              result2 = parse_balanced_code();
              if (result2 !== null) {
                result3 = parse_inline_if_body();
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, cond, then_else) { return makeInlineConditional(cond,then_else[0],then_else[1]); })(pos0.offset, pos0.line, pos0.column, result0[2], result0[3]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_cycle() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_begin_cycle();
        if (result0 !== null) {
          result1 = parse_spc();
          if (result1 !== null) {
            result2 = parse_cycle_list();
            if (result2 !== null) {
              result3 = parse_end_cycle();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, c, cycles, loop_flag) { return "(" + cycles.join(" | ") + ")"; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_cycle_list() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_postponed_quoted_text();
        if (result0 !== null) {
          if (input.substr(pos.offset, 5) === "#NEXT") {
            result1 = "#NEXT";
            advance(pos, 5);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"#NEXT\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_spc();
            if (result2 !== null) {
              result3 = parse_cycle_list();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) { return [head].concat (tail); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_postponed_quoted_text();
          if (result0 !== null) {
            result0 = (function(offset, line, column, last) { return [last]; })(pos0.offset, pos0.line, pos0.column, result0);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_begin_cycle() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 7) === "#CYCLE(") {
          result0 = "#CYCLE(";
          advance(pos, 7);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#CYCLE(\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_spc();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_spc();
          }
          if (result1 !== null) {
            result2 = parse_symbol();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_spc();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_spc();
              }
              if (result3 !== null) {
                if (input.charCodeAt(pos.offset) === 41) {
                  result4 = ")";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\")\"");
                  }
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, c) { return c; })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          if (input.substr(pos.offset, 6) === "#CYCLE") {
            result0 = "#CYCLE";
            advance(pos, 6);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"#CYCLE\"");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column) { return cyclePrefix + (++cycleCount); })(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_end_cycle() {
        var result0;
        
        if (input.substr(pos.offset, 5) === "#LOOP") {
          result0 = "#LOOP";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#LOOP\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 5) === "#STOP") {
            result0 = "#STOP";
            advance(pos, 5);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"#STOP\"");
            }
          }
        }
        return result0;
      }
      
      function parse_scene_scheduling_statement() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 6) === "#STACK") {
          result0 = "#STACK";
          advance(pos, 6);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#STACK\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_spc();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_spc();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_symbol_or_scene();
            if (result2 !== null) {
              result4 = parse_spc();
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse_spc();
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, s) { addEdge(currentScene(),s,{choiceType:"stack"}); })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 6) === "#QUEUE") {
            result0 = "#QUEUE";
            advance(pos, 6);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"#QUEUE\"");
            }
          }
          if (result0 !== null) {
            result2 = parse_spc();
            if (result2 !== null) {
              result1 = [];
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_spc();
              }
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              result2 = parse_symbol_or_scene();
              if (result2 !== null) {
                result4 = parse_spc();
                if (result4 !== null) {
                  result3 = [];
                  while (result4 !== null) {
                    result3.push(result4);
                    result4 = parse_spc();
                  }
                } else {
                  result3 = null;
                }
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, s) { addEdge(currentScene(),s,{choiceType:"queue"}); })(pos0.offset, pos0.line, pos0.column, result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            if (input.substr(pos.offset, 6) === "#FLUSH") {
              result0 = "#FLUSH";
              advance(pos, 6);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"#FLUSH\"");
              }
            }
            if (result0 !== null) {
              result2 = parse_spc();
              if (result2 !== null) {
                result1 = [];
                while (result2 !== null) {
                  result1.push(result2);
                  result2 = parse_spc();
                }
              } else {
                result1 = null;
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          }
        }
        return result0;
      }
      
      function parse_spc() {
        var result0;
        
        if (/^[ \t\n\r]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t\\n\\r]");
          }
        }
        return result0;
      }
      
      function parse_symbol() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[A-Za-z_]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[A-Za-z_]");
          }
        }
        if (result0 !== null) {
          result1 = parse_symbol_tail();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, first, rest) { return first + rest; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_symbol_tail() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_symbol_chars();
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 46) {
            result1 = ".";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_symbol();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, parent, child) { return parent + "." + child; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          result0 = parse_symbol_chars();
        }
        return result0;
      }
      
      function parse_symbol_chars() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result0 = [];
        if (/^[0-9A-Za-z_]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9A-Za-z_]");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (/^[0-9A-Za-z_]/.test(input.charAt(pos.offset))) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9A-Za-z_]");
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, chars) { return chars.join(""); })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_balanced_code() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 2) === "##") {
          result0 = "##";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"##\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_balanced_code();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, tail) { return "#" + tail; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_inc_event_count();
          if (result0 !== null) {
            result1 = parse_balanced_code();
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, c, tail) { return tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_reset_event_count();
            if (result0 !== null) {
              result1 = parse_balanced_code();
              result1 = result1 !== null ? result1 : "";
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, c, tail) { return tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              result0 = parse_query_event_count();
              if (result0 !== null) {
                result1 = parse_balanced_code();
                result1 = result1 !== null ? result1 : "";
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, c, tail) { return tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.charCodeAt(pos.offset) === 40) {
                  result0 = "(";
                  advance(pos, 1);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"(\"");
                  }
                }
                if (result0 !== null) {
                  result1 = parse_balanced_code();
                  if (result1 !== null) {
                    if (input.charCodeAt(pos.offset) === 41) {
                      result2 = ")";
                      advance(pos, 1);
                    } else {
                      result2 = null;
                      if (reportFailures === 0) {
                        matchFailed("\")\"");
                      }
                    }
                    if (result2 !== null) {
                      result3 = parse_balanced_code();
                      result3 = result3 !== null ? result3 : "";
                      if (result3 !== null) {
                        result0 = [result0, result1, result2, result3];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
                if (result0 !== null) {
                  result0 = (function(offset, line, column, inside, tail) { return "(" + inside + ")" + tail; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[3]);
                }
                if (result0 === null) {
                  pos = clone(pos0);
                }
                if (result0 === null) {
                  pos0 = clone(pos);
                  pos1 = clone(pos);
                  if (input.charCodeAt(pos.offset) === 123) {
                    result0 = "{";
                    advance(pos, 1);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"{\"");
                    }
                  }
                  if (result0 !== null) {
                    result1 = parse_balanced_code();
                    if (result1 !== null) {
                      if (input.charCodeAt(pos.offset) === 125) {
                        result2 = "}";
                        advance(pos, 1);
                      } else {
                        result2 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"}\"");
                        }
                      }
                      if (result2 !== null) {
                        result3 = parse_balanced_code();
                        result3 = result3 !== null ? result3 : "";
                        if (result3 !== null) {
                          result0 = [result0, result1, result2, result3];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, line, column, inside, tail) { return "{" + inside + "}" + tail; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[3]);
                  }
                  if (result0 === null) {
                    pos = clone(pos0);
                  }
                  if (result0 === null) {
                    pos0 = clone(pos);
                    pos1 = clone(pos);
                    if (input.charCodeAt(pos.offset) === 91) {
                      result0 = "[";
                      advance(pos, 1);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"[\"");
                      }
                    }
                    if (result0 !== null) {
                      result1 = parse_balanced_code();
                      if (result1 !== null) {
                        if (input.charCodeAt(pos.offset) === 93) {
                          result2 = "]";
                          advance(pos, 1);
                        } else {
                          result2 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"]\"");
                          }
                        }
                        if (result2 !== null) {
                          result3 = parse_balanced_code();
                          result3 = result3 !== null ? result3 : "";
                          if (result3 !== null) {
                            result0 = [result0, result1, result2, result3];
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                    if (result0 !== null) {
                      result0 = (function(offset, line, column, inside, tail) { return "[" + inside + "]" + tail; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[3]);
                    }
                    if (result0 === null) {
                      pos = clone(pos0);
                    }
                    if (result0 === null) {
                      pos0 = clone(pos);
                      pos1 = clone(pos);
                      result0 = parse_balanced_code_chars();
                      if (result0 !== null) {
                        result1 = parse_balanced_code();
                        result1 = result1 !== null ? result1 : "";
                        if (result1 !== null) {
                          result0 = [result0, result1];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                      if (result0 !== null) {
                        result0 = (function(offset, line, column, head, tail) { return head + tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                      }
                      if (result0 === null) {
                        pos = clone(pos0);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_balanced_code_chars() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        if (/^[^#(){}[\]]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[^#(){}[\\]]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[^#(){}[\]]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[^#(){}[\\]]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, chars) { return chars.join(""); })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_code() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 2) === "##") {
          result0 = "##";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"##\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_code();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, tail) { return "#" + tail; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_inc_event_count();
          if (result0 !== null) {
            result1 = parse_code();
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, c, tail) { return tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_reset_event_count();
            if (result0 !== null) {
              result1 = parse_code();
              result1 = result1 !== null ? result1 : "";
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, c, tail) { return tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              result0 = parse_query_event_count();
              if (result0 !== null) {
                result1 = parse_code();
                result1 = result1 !== null ? result1 : "";
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, c, tail) { return tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_code_chars();
                if (result0 !== null) {
                  result1 = parse_code();
                  result1 = result1 !== null ? result1 : "";
                  if (result1 !== null) {
                    result0 = [result0, result1];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
                if (result0 !== null) {
                  result0 = (function(offset, line, column, head, tail) { return head + tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                }
                if (result0 === null) {
                  pos = clone(pos0);
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_code_chars() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        if (/^[^#]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[^#]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[^#]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[^#]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, chars) { return chars.join(""); })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_statement() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_code();
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 59) {
            result1 = ";";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\";\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_spc();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_spc();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head) { return head + ";"; })(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_code();
          if (result0 !== null) {
            result1 = [];
            result2 = parse_spc();
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_spc();
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, head) { return head + ";"; })(pos0.offset, pos0.line, pos0.column, result0[0]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_statements() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result1 = parse_statement();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_statement();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, s) { return s.join(""); })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_postponed_quoted_text() {
        var result0;
        
        result0 = parse_nonempty_quoted_text();
        return result0;
      }
      
      function parse_nonempty_quoted_text() {
        var result0;
        
        result0 = parse_text();
        return result0;
      }
      
      function parse_text() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 2) === "\\#") {
          result0 = "\\#";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\\#\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_text();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, tail) { return tail; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 2) === "\\\\") {
            result0 = "\\\\";
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\\\\\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_text();
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, tail) { return tail; })(pos0.offset, pos0.line, pos0.column, result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_comment();
            if (result0 !== null) {
              result1 = parse_text();
              result1 = result1 !== null ? result1 : "";
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, tail) { return tail; })(pos0.offset, pos0.line, pos0.column, result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              result0 = parse_hash_rank();
              if (result0 !== null) {
                result1 = parse_text();
                result1 = result1 !== null ? result1 : "";
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, rank, tail) { return rank + tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 2) === "#$") {
                  result0 = "#$";
                  advance(pos, 2);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"#$\"");
                  }
                }
                if (result0 !== null) {
                  result1 = parse_symbol();
                  if (result1 !== null) {
                    result2 = parse_text();
                    result2 = result2 !== null ? result2 : "";
                    if (result2 !== null) {
                      result0 = [result0, result1, result2];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
                if (result0 !== null) {
                  result0 = (function(offset, line, column, v, tail) { return "$" + v + tail; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
                }
                if (result0 === null) {
                  pos = clone(pos0);
                }
                if (result0 === null) {
                  pos0 = clone(pos);
                  pos1 = clone(pos);
                  if (input.substr(pos.offset, 2) === "#[") {
                    result0 = "#[";
                    advance(pos, 2);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"#[\"");
                    }
                  }
                  if (result0 !== null) {
                    result1 = parse_balanced_code();
                    if (result1 !== null) {
                      if (input.substr(pos.offset, 2) === "#]") {
                        result2 = "#]";
                        advance(pos, 2);
                      } else {
                        result2 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"#]\"");
                        }
                      }
                      if (result2 !== null) {
                        result3 = parse_text();
                        result3 = result3 !== null ? result3 : "";
                        if (result3 !== null) {
                          result0 = [result0, result1, result2, result3];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, line, column, expr, tail) { return tail; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[3]);
                  }
                  if (result0 === null) {
                    pos = clone(pos0);
                  }
                  if (result0 === null) {
                    pos0 = clone(pos);
                    pos1 = clone(pos);
                    if (input.substr(pos.offset, 2) === "#{") {
                      result0 = "#{";
                      advance(pos, 2);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"#{\"");
                      }
                    }
                    if (result0 !== null) {
                      result1 = parse_statements();
                      if (result1 !== null) {
                        if (input.substr(pos.offset, 2) === "#}") {
                          result2 = "#}";
                          advance(pos, 2);
                        } else {
                          result2 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"#}\"");
                          }
                        }
                        if (result2 !== null) {
                          result3 = parse_text();
                          result3 = result3 !== null ? result3 : "";
                          if (result3 !== null) {
                            result0 = [result0, result1, result2, result3];
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                    if (result0 !== null) {
                      result0 = (function(offset, line, column, code, tail) { return tail; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[3]);
                    }
                    if (result0 === null) {
                      pos = clone(pos0);
                    }
                    if (result0 === null) {
                      pos0 = clone(pos);
                      pos1 = clone(pos);
                      result0 = parse_inline_if_then_else();
                      if (result0 !== null) {
                        result1 = parse_text();
                        result1 = result1 !== null ? result1 : "";
                        if (result1 !== null) {
                          result0 = [result0, result1];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                      if (result0 !== null) {
                        result0 = (function(offset, line, column, cond, tail) { return tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                      }
                      if (result0 === null) {
                        pos = clone(pos0);
                      }
                      if (result0 === null) {
                        pos0 = clone(pos);
                        pos1 = clone(pos);
                        if (input.substr(pos.offset, 5) === "#EVAL") {
                          result0 = "#EVAL";
                          advance(pos, 5);
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"#EVAL\"");
                          }
                        }
                        if (result0 !== null) {
                          result1 = parse_balanced_code();
                          if (result1 !== null) {
                            if (input.substr(pos.offset, 5) === "#TEXT") {
                              result2 = "#TEXT";
                              advance(pos, 5);
                            } else {
                              result2 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"#TEXT\"");
                              }
                            }
                            if (result2 !== null) {
                              result3 = parse_text();
                              result3 = result3 !== null ? result3 : "";
                              if (result3 !== null) {
                                result0 = [result0, result1, result2, result3];
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                        if (result0 !== null) {
                          result0 = (function(offset, line, column, expr, tail) { return tail; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[3]);
                        }
                        if (result0 === null) {
                          pos = clone(pos0);
                        }
                        if (result0 === null) {
                          pos0 = clone(pos);
                          pos1 = clone(pos);
                          if (input.substr(pos.offset, 8) === "#INCLUDE") {
                            result0 = "#INCLUDE";
                            advance(pos, 8);
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"#INCLUDE\"");
                            }
                          }
                          if (result0 !== null) {
                            result2 = parse_spc();
                            if (result2 !== null) {
                              result1 = [];
                              while (result2 !== null) {
                                result1.push(result2);
                                result2 = parse_spc();
                              }
                            } else {
                              result1 = null;
                            }
                            if (result1 !== null) {
                              result2 = parse_symbol();
                              if (result2 !== null) {
                                result3 = parse_text();
                                result3 = result3 !== null ? result3 : "";
                                if (result3 !== null) {
                                  result0 = [result0, result1, result2, result3];
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                          if (result0 !== null) {
                            result0 = (function(offset, line, column, s, tail) { return tail; })(pos0.offset, pos0.line, pos0.column, result0[2], result0[3]);
                          }
                          if (result0 === null) {
                            pos = clone(pos0);
                          }
                          if (result0 === null) {
                            pos0 = clone(pos);
                            pos1 = clone(pos);
                            result0 = parse_cycle();
                            if (result0 !== null) {
                              result1 = parse_text();
                              result1 = result1 !== null ? result1 : "";
                              if (result1 !== null) {
                                result0 = [result0, result1];
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                            if (result0 !== null) {
                              result0 = (function(offset, line, column, c, tail) { return c + tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                            }
                            if (result0 === null) {
                              pos = clone(pos0);
                            }
                            if (result0 === null) {
                              pos0 = clone(pos);
                              pos1 = clone(pos);
                              result0 = parse_scene_scheduling_statement();
                              if (result0 !== null) {
                                result1 = parse_text();
                                result1 = result1 !== null ? result1 : "";
                                if (result1 !== null) {
                                  result0 = [result0, result1];
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                              if (result0 !== null) {
                                result0 = (function(offset, line, column, s, tail) { return tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                              }
                              if (result0 === null) {
                                pos = clone(pos0);
                              }
                              if (result0 === null) {
                                pos0 = clone(pos);
                                pos1 = clone(pos);
                                result0 = parse_inc_event_count();
                                if (result0 !== null) {
                                  result1 = parse_text();
                                  result1 = result1 !== null ? result1 : "";
                                  if (result1 !== null) {
                                    result0 = [result0, result1];
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                                if (result0 !== null) {
                                  result0 = (function(offset, line, column, c, tail) { return tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                                }
                                if (result0 === null) {
                                  pos = clone(pos0);
                                }
                                if (result0 === null) {
                                  pos0 = clone(pos);
                                  pos1 = clone(pos);
                                  result0 = parse_reset_event_count();
                                  if (result0 !== null) {
                                    result1 = parse_text();
                                    result1 = result1 !== null ? result1 : "";
                                    if (result1 !== null) {
                                      result0 = [result0, result1];
                                    } else {
                                      result0 = null;
                                      pos = clone(pos1);
                                    }
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                  if (result0 !== null) {
                                    result0 = (function(offset, line, column, c, tail) { return tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                                  }
                                  if (result0 === null) {
                                    pos = clone(pos0);
                                  }
                                  if (result0 === null) {
                                    pos0 = clone(pos);
                                    pos1 = clone(pos);
                                    if (input.charCodeAt(pos.offset) === 34) {
                                      result0 = "\"";
                                      advance(pos, 1);
                                    } else {
                                      result0 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"\\\"\"");
                                      }
                                    }
                                    if (result0 !== null) {
                                      result1 = parse_text();
                                      result1 = result1 !== null ? result1 : "";
                                      if (result1 !== null) {
                                        result0 = [result0, result1];
                                      } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                      }
                                    } else {
                                      result0 = null;
                                      pos = clone(pos1);
                                    }
                                    if (result0 !== null) {
                                      result0 = (function(offset, line, column, tail) { return "'" + tail; })(pos0.offset, pos0.line, pos0.column, result0[1]);
                                    }
                                    if (result0 === null) {
                                      pos = clone(pos0);
                                    }
                                    if (result0 === null) {
                                      pos0 = clone(pos);
                                      pos1 = clone(pos);
                                      if (input.charCodeAt(pos.offset) === 10) {
                                        result0 = "\n";
                                        advance(pos, 1);
                                      } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\"\\n\"");
                                        }
                                      }
                                      if (result0 !== null) {
                                        result1 = parse_text();
                                        result1 = result1 !== null ? result1 : "";
                                        if (result1 !== null) {
                                          result0 = [result0, result1];
                                        } else {
                                          result0 = null;
                                          pos = clone(pos1);
                                        }
                                      } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                      }
                                      if (result0 !== null) {
                                        result0 = (function(offset, line, column, tail) { return " " + tail; })(pos0.offset, pos0.line, pos0.column, result0[1]);
                                      }
                                      if (result0 === null) {
                                        pos = clone(pos0);
                                      }
                                      if (result0 === null) {
                                        pos0 = clone(pos);
                                        pos1 = clone(pos);
                                        result0 = parse_text_chars();
                                        if (result0 !== null) {
                                          result1 = parse_text();
                                          result1 = result1 !== null ? result1 : "";
                                          if (result1 !== null) {
                                            result0 = [result0, result1];
                                          } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                          }
                                        } else {
                                          result0 = null;
                                          pos = clone(pos1);
                                        }
                                        if (result0 !== null) {
                                          result0 = (function(offset, line, column, head, tail) { return head + tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                                        }
                                        if (result0 === null) {
                                          pos = clone(pos0);
                                        }
                                        if (result0 === null) {
                                          pos0 = clone(pos);
                                          pos1 = clone(pos);
                                          result0 = parse_hash_run();
                                          if (result0 !== null) {
                                            result1 = parse_text();
                                            result1 = result1 !== null ? result1 : "";
                                            if (result1 !== null) {
                                              result0 = [result0, result1];
                                            } else {
                                              result0 = null;
                                              pos = clone(pos1);
                                            }
                                          } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                          }
                                          if (result0 !== null) {
                                            result0 = (function(offset, line, column, h, tail) { return h + tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                                          }
                                          if (result0 === null) {
                                            pos = clone(pos0);
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_scene_text() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 2) === "\\#") {
          result0 = "\\#";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\\#\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_scene_text();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, tail) { return "#" + tail; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 2) === "\\\\") {
            result0 = "\\\\";
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\\\\\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_scene_text();
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, tail) { return "\\\\" + tail; })(pos0.offset, pos0.line, pos0.column, result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_comment();
            if (result0 !== null) {
              result1 = parse_scene_text();
              result1 = result1 !== null ? result1 : "";
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, tail) { return tail; })(pos0.offset, pos0.line, pos0.column, result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              result0 = parse_hash_rank();
              if (result0 !== null) {
                result1 = parse_scene_text();
                result1 = result1 !== null ? result1 : "";
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, rank, tail) { return hash_rank + tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 2) === "#$") {
                  result0 = "#$";
                  advance(pos, 2);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"#$\"");
                  }
                }
                if (result0 !== null) {
                  result1 = parse_symbol();
                  if (result1 !== null) {
                    result2 = parse_scene_text();
                    result2 = result2 !== null ? result2 : "";
                    if (result2 !== null) {
                      result0 = [result0, result1, result2];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
                if (result0 !== null) {
                  result0 = (function(offset, line, column, v, tail) { return "`" + v + "`" + tail; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
                }
                if (result0 === null) {
                  pos = clone(pos0);
                }
                if (result0 === null) {
                  pos0 = clone(pos);
                  pos1 = clone(pos);
                  if (input.substr(pos.offset, 2) === "#[") {
                    result0 = "#[";
                    advance(pos, 2);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"#[\"");
                    }
                  }
                  if (result0 !== null) {
                    result1 = parse_balanced_code();
                    if (result1 !== null) {
                      if (input.substr(pos.offset, 2) === "#]") {
                        result2 = "#]";
                        advance(pos, 2);
                      } else {
                        result2 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"#]\"");
                        }
                      }
                      if (result2 !== null) {
                        result3 = parse_scene_text();
                        result3 = result3 !== null ? result3 : "";
                        if (result3 !== null) {
                          result0 = [result0, result1, result2, result3];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, line, column, expr, tail) { return "`" + expr + "`" + tail; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[3]);
                  }
                  if (result0 === null) {
                    pos = clone(pos0);
                  }
                  if (result0 === null) {
                    pos0 = clone(pos);
                    pos1 = clone(pos);
                    if (input.substr(pos.offset, 2) === "#{") {
                      result0 = "#{";
                      advance(pos, 2);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"#{\"");
                      }
                    }
                    if (result0 !== null) {
                      result1 = parse_statements();
                      if (result1 !== null) {
                        if (input.substr(pos.offset, 2) === "#}") {
                          result2 = "#}";
                          advance(pos, 2);
                        } else {
                          result2 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"#}\"");
                          }
                        }
                        if (result2 !== null) {
                          result3 = parse_scene_text();
                          result3 = result3 !== null ? result3 : "";
                          if (result3 !== null) {
                            result0 = [result0, result1, result2, result3];
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                    if (result0 !== null) {
                      result0 = (function(offset, line, column, code, tail) { return tail; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[3]);
                    }
                    if (result0 === null) {
                      pos = clone(pos0);
                    }
                    if (result0 === null) {
                      pos0 = clone(pos);
                      pos1 = clone(pos);
                      result0 = parse_if_then_else();
                      if (result0 !== null) {
                        result1 = parse_scene_text();
                        result1 = result1 !== null ? result1 : "";
                        if (result1 !== null) {
                          result0 = [result0, result1];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                      if (result0 !== null) {
                        result0 = (function(offset, line, column, cond, tail) { return tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                      }
                      if (result0 === null) {
                        pos = clone(pos0);
                      }
                      if (result0 === null) {
                        pos0 = clone(pos);
                        pos1 = clone(pos);
                        if (input.substr(pos.offset, 5) === "#EVAL") {
                          result0 = "#EVAL";
                          advance(pos, 5);
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"#EVAL\"");
                          }
                        }
                        if (result0 !== null) {
                          result1 = parse_balanced_code();
                          if (result1 !== null) {
                            if (input.substr(pos.offset, 5) === "#TEXT") {
                              result2 = "#TEXT";
                              advance(pos, 5);
                            } else {
                              result2 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"#TEXT\"");
                              }
                            }
                            if (result2 !== null) {
                              result3 = parse_scene_text();
                              result3 = result3 !== null ? result3 : "";
                              if (result3 !== null) {
                                result0 = [result0, result1, result2, result3];
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                        if (result0 !== null) {
                          result0 = (function(offset, line, column, expr, tail) { return tail; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[3]);
                        }
                        if (result0 === null) {
                          pos = clone(pos0);
                        }
                        if (result0 === null) {
                          pos0 = clone(pos);
                          pos1 = clone(pos);
                          result0 = parse_cycle();
                          if (result0 !== null) {
                            result1 = parse_scene_text();
                            result1 = result1 !== null ? result1 : "";
                            if (result1 !== null) {
                              result0 = [result0, result1];
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                          if (result0 !== null) {
                            result0 = (function(offset, line, column, c, tail) { return c + tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                          }
                          if (result0 === null) {
                            pos = clone(pos0);
                          }
                          if (result0 === null) {
                            pos0 = clone(pos);
                            pos1 = clone(pos);
                            result0 = parse_scene_scheduling_statement();
                            if (result0 !== null) {
                              result1 = parse_scene_text();
                              result1 = result1 !== null ? result1 : "";
                              if (result1 !== null) {
                                result0 = [result0, result1];
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                            if (result0 !== null) {
                              result0 = (function(offset, line, column, s, tail) { return tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                            }
                            if (result0 === null) {
                              pos = clone(pos0);
                            }
                            if (result0 === null) {
                              pos0 = clone(pos);
                              pos1 = clone(pos);
                              result0 = parse_inc_event_count();
                              if (result0 !== null) {
                                result1 = parse_scene_text();
                                result1 = result1 !== null ? result1 : "";
                                if (result1 !== null) {
                                  result0 = [result0, result1];
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                              if (result0 !== null) {
                                result0 = (function(offset, line, column, c, tail) { return tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                              }
                              if (result0 === null) {
                                pos = clone(pos0);
                              }
                              if (result0 === null) {
                                pos0 = clone(pos);
                                pos1 = clone(pos);
                                result0 = parse_reset_event_count();
                                if (result0 !== null) {
                                  result1 = parse_scene_text();
                                  result1 = result1 !== null ? result1 : "";
                                  if (result1 !== null) {
                                    result0 = [result0, result1];
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                                if (result0 !== null) {
                                  result0 = (function(offset, line, column, c, tail) { return tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                                }
                                if (result0 === null) {
                                  pos = clone(pos0);
                                }
                                if (result0 === null) {
                                  pos0 = clone(pos);
                                  pos1 = clone(pos);
                                  result0 = parse_status_badges();
                                  if (result0 !== null) {
                                    result1 = parse_scene_text();
                                    result1 = result1 !== null ? result1 : "";
                                    if (result1 !== null) {
                                      result0 = [result0, result1];
                                    } else {
                                      result0 = null;
                                      pos = clone(pos1);
                                    }
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                  if (result0 !== null) {
                                    result0 = (function(offset, line, column, s, tail) { return tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                                  }
                                  if (result0 === null) {
                                    pos = clone(pos0);
                                  }
                                  if (result0 === null) {
                                    pos0 = clone(pos);
                                    pos1 = clone(pos);
                                    result0 = parse_meter_bars();
                                    if (result0 !== null) {
                                      result1 = parse_scene_text();
                                      result1 = result1 !== null ? result1 : "";
                                      if (result1 !== null) {
                                        result0 = [result0, result1];
                                      } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                      }
                                    } else {
                                      result0 = null;
                                      pos = clone(pos1);
                                    }
                                    if (result0 !== null) {
                                      result0 = (function(offset, line, column, m, tail) { return tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                                    }
                                    if (result0 === null) {
                                      pos = clone(pos0);
                                    }
                                    if (result0 === null) {
                                      pos0 = clone(pos);
                                      pos1 = clone(pos);
                                      if (input.substr(pos.offset, 6) === "#TITLE") {
                                        result0 = "#TITLE";
                                        advance(pos, 6);
                                      } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\"#TITLE\"");
                                        }
                                      }
                                      if (result0 !== null) {
                                        result2 = parse_spc();
                                        if (result2 !== null) {
                                          result1 = [];
                                          while (result2 !== null) {
                                            result1.push(result2);
                                            result2 = parse_spc();
                                          }
                                        } else {
                                          result1 = null;
                                        }
                                        if (result1 !== null) {
                                          result2 = parse_nonempty_quoted_text();
                                          if (result2 !== null) {
                                            if (input.substr(pos.offset, 9) === "#ENDTITLE") {
                                              result3 = "#ENDTITLE";
                                              advance(pos, 9);
                                            } else {
                                              result3 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("\"#ENDTITLE\"");
                                              }
                                            }
                                            if (result3 !== null) {
                                              result4 = parse_scene_text();
                                              result4 = result4 !== null ? result4 : "";
                                              if (result4 !== null) {
                                                result0 = [result0, result1, result2, result3, result4];
                                              } else {
                                                result0 = null;
                                                pos = clone(pos1);
                                              }
                                            } else {
                                              result0 = null;
                                              pos = clone(pos1);
                                            }
                                          } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                          }
                                        } else {
                                          result0 = null;
                                          pos = clone(pos1);
                                        }
                                      } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                      }
                                      if (result0 !== null) {
                                        result0 = (function(offset, line, column, t, tail) { return tail; })(pos0.offset, pos0.line, pos0.column, result0[2], result0[4]);
                                      }
                                      if (result0 === null) {
                                        pos = clone(pos0);
                                      }
                                      if (result0 === null) {
                                        pos0 = clone(pos);
                                        pos1 = clone(pos);
                                        if (input.substr(pos.offset, 7) === "#BUTTON") {
                                          result0 = "#BUTTON";
                                          advance(pos, 7);
                                        } else {
                                          result0 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\"#BUTTON\"");
                                          }
                                        }
                                        if (result0 !== null) {
                                          result2 = parse_spc();
                                          if (result2 !== null) {
                                            result1 = [];
                                            while (result2 !== null) {
                                              result1.push(result2);
                                              result2 = parse_spc();
                                            }
                                          } else {
                                            result1 = null;
                                          }
                                          if (result1 !== null) {
                                            result2 = parse_nonempty_quoted_text();
                                            if (result2 !== null) {
                                              if (input.substr(pos.offset, 10) === "#ENDBUTTON") {
                                                result3 = "#ENDBUTTON";
                                                advance(pos, 10);
                                              } else {
                                                result3 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed("\"#ENDBUTTON\"");
                                                }
                                              }
                                              if (result3 !== null) {
                                                result4 = parse_scene_text();
                                                result4 = result4 !== null ? result4 : "";
                                                if (result4 !== null) {
                                                  result0 = [result0, result1, result2, result3, result4];
                                                } else {
                                                  result0 = null;
                                                  pos = clone(pos1);
                                                }
                                              } else {
                                                result0 = null;
                                                pos = clone(pos1);
                                              }
                                            } else {
                                              result0 = null;
                                              pos = clone(pos1);
                                            }
                                          } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                          }
                                        } else {
                                          result0 = null;
                                          pos = clone(pos1);
                                        }
                                        if (result0 !== null) {
                                          result0 = (function(offset, line, column, b, tail) { return tail; })(pos0.offset, pos0.line, pos0.column, result0[2], result0[4]);
                                        }
                                        if (result0 === null) {
                                          pos = clone(pos0);
                                        }
                                        if (result0 === null) {
                                          pos0 = clone(pos);
                                          pos1 = clone(pos);
                                          if (input.charCodeAt(pos.offset) === 34) {
                                            result0 = "\"";
                                            advance(pos, 1);
                                          } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\"\\\"\"");
                                            }
                                          }
                                          if (result0 !== null) {
                                            result1 = parse_scene_text();
                                            result1 = result1 !== null ? result1 : "";
                                            if (result1 !== null) {
                                              result0 = [result0, result1];
                                            } else {
                                              result0 = null;
                                              pos = clone(pos1);
                                            }
                                          } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                          }
                                          if (result0 !== null) {
                                            result0 = (function(offset, line, column, tail) { return "'" + tail; })(pos0.offset, pos0.line, pos0.column, result0[1]);
                                          }
                                          if (result0 === null) {
                                            pos = clone(pos0);
                                          }
                                          if (result0 === null) {
                                            pos0 = clone(pos);
                                            pos1 = clone(pos);
                                            if (input.charCodeAt(pos.offset) === 10) {
                                              result0 = "\n";
                                              advance(pos, 1);
                                            } else {
                                              result0 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("\"\\n\"");
                                              }
                                            }
                                            if (result0 !== null) {
                                              result1 = [];
                                              result2 = parse_spc();
                                              while (result2 !== null) {
                                                result1.push(result2);
                                                result2 = parse_spc();
                                              }
                                              if (result1 !== null) {
                                                result2 = parse_scene_text();
                                                result2 = result2 !== null ? result2 : "";
                                                if (result2 !== null) {
                                                  result0 = [result0, result1, result2];
                                                } else {
                                                  result0 = null;
                                                  pos = clone(pos1);
                                                }
                                              } else {
                                                result0 = null;
                                                pos = clone(pos1);
                                              }
                                            } else {
                                              result0 = null;
                                              pos = clone(pos1);
                                            }
                                            if (result0 !== null) {
                                              result0 = (function(offset, line, column, tail) { return "\n" + tail; })(pos0.offset, pos0.line, pos0.column, result0[2]);
                                            }
                                            if (result0 === null) {
                                              pos = clone(pos0);
                                            }
                                            if (result0 === null) {
                                              pos0 = clone(pos);
                                              pos1 = clone(pos);
                                              result0 = parse_text_chars();
                                              if (result0 !== null) {
                                                result1 = parse_scene_text();
                                                result1 = result1 !== null ? result1 : "";
                                                if (result1 !== null) {
                                                  result0 = [result0, result1];
                                                } else {
                                                  result0 = null;
                                                  pos = clone(pos1);
                                                }
                                              } else {
                                                result0 = null;
                                                pos = clone(pos1);
                                              }
                                              if (result0 !== null) {
                                                result0 = (function(offset, line, column, head, tail) { return head + tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                                              }
                                              if (result0 === null) {
                                                pos = clone(pos0);
                                              }
                                              if (result0 === null) {
                                                pos0 = clone(pos);
                                                pos1 = clone(pos);
                                                result0 = parse_hash_run();
                                                if (result0 !== null) {
                                                  result1 = parse_scene_text();
                                                  result1 = result1 !== null ? result1 : "";
                                                  if (result1 !== null) {
                                                    result0 = [result0, result1];
                                                  } else {
                                                    result0 = null;
                                                    pos = clone(pos1);
                                                  }
                                                } else {
                                                  result0 = null;
                                                  pos = clone(pos1);
                                                }
                                                if (result0 !== null) {
                                                  result0 = (function(offset, line, column, h, tail) { return h + tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                                                }
                                                if (result0 === null) {
                                                  pos = clone(pos0);
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_hash_run() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[#]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[#]");
          }
        }
        if (result0 !== null) {
          result1 = parse_encoded_spc();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, h, s) { return h + s; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (/^[#]/.test(input.charAt(pos.offset))) {
            result0 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("[#]");
            }
          }
          if (result0 !== null) {
            if (/^[#]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[#]");
              }
            }
            if (result2 !== null) {
              result1 = [];
              while (result2 !== null) {
                result1.push(result2);
                if (/^[#]/.test(input.charAt(pos.offset))) {
                  result2 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("[#]");
                  }
                }
              }
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, h1, h2) { return h1 + h2.join(""); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_encoded_spc() {
        var result0;
        
        if (input.charCodeAt(pos.offset) === 32) {
          result0 = " ";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\" \"");
          }
        }
        if (result0 === null) {
          if (/^[\t]/.test(input.charAt(pos.offset))) {
            result0 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("[\\t]");
            }
          }
          if (result0 === null) {
            if (/^[\n]/.test(input.charAt(pos.offset))) {
              result0 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("[\\n]");
              }
            }
            if (result0 === null) {
              if (/^[\r]/.test(input.charAt(pos.offset))) {
                result0 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("[\\r]");
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_hash_rank() {
        var result0;
        
        if (input.substr(pos.offset, 2) === "#!") {
          result0 = "#!";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#!\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 2) === "#0") {
            result0 = "#0";
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"#0\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos.offset, 2) === "#1") {
              result0 = "#1";
              advance(pos, 2);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"#1\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos.offset, 2) === "#2") {
                result0 = "#2";
                advance(pos, 2);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"#2\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos.offset, 2) === "#3") {
                  result0 = "#3";
                  advance(pos, 2);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"#3\"");
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos.offset, 2) === "#4") {
                    result0 = "#4";
                    advance(pos, 2);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"#4\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.substr(pos.offset, 2) === "#5") {
                      result0 = "#5";
                      advance(pos, 2);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"#5\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.substr(pos.offset, 2) === "#6") {
                        result0 = "#6";
                        advance(pos, 2);
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"#6\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.substr(pos.offset, 2) === "#7") {
                          result0 = "#7";
                          advance(pos, 2);
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"#7\"");
                          }
                        }
                        if (result0 === null) {
                          if (input.substr(pos.offset, 2) === "#8") {
                            result0 = "#8";
                            advance(pos, 2);
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"#8\"");
                            }
                          }
                          if (result0 === null) {
                            if (input.substr(pos.offset, 2) === "#9") {
                              result0 = "#9";
                              advance(pos, 2);
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"#9\"");
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_text_chars() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        if (/^[^#\\"\n]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[^#\\\\\"\\n]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[^#\\"\n]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[^#\\\\\"\\n]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, chars) { return chars.join(""); })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_comment() {
        var result0;
        
        result0 = parse_multi_line_comment();
        if (result0 === null) {
          result0 = parse_single_line_comment();
        }
        return result0;
      }
      
      function parse_multi_line_comment() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 3) === "#/*") {
          result0 = "#/*";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#/*\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          pos1 = clone(pos);
          pos2 = clone(pos);
          reportFailures++;
          if (input.substr(pos.offset, 2) === "*/") {
            result2 = "*/";
            advance(pos, 2);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\"*/\"");
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          if (result2 !== null) {
            result3 = parse_source_character();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = clone(pos);
            pos2 = clone(pos);
            reportFailures++;
            if (input.substr(pos.offset, 2) === "*/") {
              result2 = "*/";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"*/\"");
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            if (result2 !== null) {
              result3 = parse_source_character();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 2) === "*/") {
              result2 = "*/";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"*/\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_multi_line_comment_no_line_terminator() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 3) === "#/*") {
          result0 = "#/*";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#/*\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          pos1 = clone(pos);
          pos2 = clone(pos);
          reportFailures++;
          if (input.substr(pos.offset, 2) === "*/") {
            result2 = "*/";
            advance(pos, 2);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\"*/\"");
            }
          }
          if (result2 === null) {
            result2 = parse_line_terminator();
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          if (result2 !== null) {
            result3 = parse_source_character();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = clone(pos);
            pos2 = clone(pos);
            reportFailures++;
            if (input.substr(pos.offset, 2) === "*/") {
              result2 = "*/";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"*/\"");
              }
            }
            if (result2 === null) {
              result2 = parse_line_terminator();
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            if (result2 !== null) {
              result3 = parse_source_character();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 2) === "*/") {
              result2 = "*/";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"*/\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_single_line_comment() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 3) === "#//") {
          result0 = "#//";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#//\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          pos1 = clone(pos);
          pos2 = clone(pos);
          reportFailures++;
          result2 = parse_line_terminator();
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          if (result2 !== null) {
            result3 = parse_source_character();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = clone(pos);
            pos2 = clone(pos);
            reportFailures++;
            result2 = parse_line_terminator();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            if (result2 !== null) {
              result3 = parse_source_character();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_line_terminator() {
        var result0;
        
        if (/^[\n\r\u2028\u2029]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\n\\r\\u2028\\u2029]");
          }
        }
        return result0;
      }
      
      function parse_source_character() {
        var result0;
        
        if (input.length > pos.offset) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("any character");
          }
        }
        return result0;
      }
      
      function parse_named_minigame_scene() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 5) === "#PAGE") {
          result0 = "#PAGE";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#PAGE\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_spc();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_spc();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_symbol();
            if (result2 !== null) {
              result4 = parse_spc();
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse_spc();
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result4 = (function(offset, line, column, name) {return setPageName(name);})(pos.offset, pos.line, pos.column, result2) ? "" : null;
                if (result4 !== null) {
                  if (input.substr(pos.offset, 6) === "#SCENE") {
                    result5 = "#SCENE";
                    advance(pos, 6);
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"#SCENE\"");
                    }
                  }
                  if (result5 !== null) {
                    result6 = parse_spc();
                    if (result6 !== null) {
                      result7 = (function(offset, line, column, name) {return startScene(line,column);})(pos.offset, pos.line, pos.column, result2) ? "" : null;
                      if (result7 !== null) {
                        result8 = parse_cazoo_intro_text();
                        if (result8 !== null) {
                          if (input.substr(pos.offset, 9) === "#MINIGAME") {
                            result9 = "#MINIGAME";
                            advance(pos, 9);
                          } else {
                            result9 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"#MINIGAME\"");
                            }
                          }
                          if (result9 !== null) {
                            result10 = parse_spc();
                            if (result10 !== null) {
                              result11 = parse_quoted_cazoo_code();
                              if (result11 !== null) {
                                if (input.substr(pos.offset, 9) === "#ENDSCENE") {
                                  result12 = "#ENDSCENE";
                                  advance(pos, 9);
                                } else {
                                  result12 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"#ENDSCENE\"");
                                  }
                                }
                                if (result12 !== null) {
                                  result13 = (function(offset, line, column, name, intro, cazoo) {return endScene();})(pos.offset, pos.line, pos.column, result2, result8, result11) ? "" : null;
                                  if (result13 !== null) {
                                    result14 = (function(offset, line, column, name, intro, cazoo) {return resetPageName();})(pos.offset, pos.line, pos.column, result2, result8, result11) ? "" : null;
                                    if (result14 !== null) {
                                      result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14];
                                    } else {
                                      result0 = null;
                                      pos = clone(pos1);
                                    }
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name, intro, cazoo) { return makeAssignment (name, makeMinigameSceneFunction(intro,cazoo)); })(pos0.offset, pos0.line, pos0.column, result0[2], result0[8], result0[11]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 5) === "#PAGE") {
            result0 = "#PAGE";
            advance(pos, 5);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"#PAGE\"");
            }
          }
          if (result0 !== null) {
            result2 = parse_spc();
            if (result2 !== null) {
              result1 = [];
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_spc();
              }
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              result2 = parse_symbol();
              if (result2 !== null) {
                result4 = parse_spc();
                if (result4 !== null) {
                  result3 = [];
                  while (result4 !== null) {
                    result3.push(result4);
                    result4 = parse_spc();
                  }
                } else {
                  result3 = null;
                }
                if (result3 !== null) {
                  result4 = (function(offset, line, column, name) {return setPageName(name);})(pos.offset, pos.line, pos.column, result2) ? "" : null;
                  if (result4 !== null) {
                    if (input.substr(pos.offset, 2) === "#(") {
                      result5 = "#(";
                      advance(pos, 2);
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"#(\"");
                      }
                    }
                    if (result5 !== null) {
                      result6 = parse_spc();
                      if (result6 !== null) {
                        result7 = (function(offset, line, column, name) {return startScene(line,column);})(pos.offset, pos.line, pos.column, result2) ? "" : null;
                        if (result7 !== null) {
                          result8 = parse_cazoo_intro_text();
                          if (result8 !== null) {
                            if (input.substr(pos.offset, 9) === "#MINIGAME") {
                              result9 = "#MINIGAME";
                              advance(pos, 9);
                            } else {
                              result9 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"#MINIGAME\"");
                              }
                            }
                            if (result9 !== null) {
                              result10 = parse_spc();
                              if (result10 !== null) {
                                result11 = parse_quoted_cazoo_code();
                                if (result11 !== null) {
                                  if (input.substr(pos.offset, 2) === "#)") {
                                    result12 = "#)";
                                    advance(pos, 2);
                                  } else {
                                    result12 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"#)\"");
                                    }
                                  }
                                  if (result12 !== null) {
                                    result13 = (function(offset, line, column, name, intro, cazoo) {return endScene();})(pos.offset, pos.line, pos.column, result2, result8, result11) ? "" : null;
                                    if (result13 !== null) {
                                      result14 = (function(offset, line, column, name, intro, cazoo) {return resetPageName();})(pos.offset, pos.line, pos.column, result2, result8, result11) ? "" : null;
                                      if (result14 !== null) {
                                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14];
                                      } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                      }
                                    } else {
                                      result0 = null;
                                      pos = clone(pos1);
                                    }
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, name, intro, cazoo) { return makeAssignment (name, makeMinigameSceneFunction(intro,cazoo)); })(pos0.offset, pos0.line, pos0.column, result0[2], result0[8], result0[11]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_quoted_cazoo_code() {
        var result0;
        
        result0 = parse_cazoo_code();
        return result0;
      }
      
      function parse_cazoo_code() {
        var result0, result1, result2, result3;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "\\#") {
          result0 = "\\#";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\\#\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_cazoo_code();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          if (input.substr(pos.offset, 2) === "\\\\") {
            result0 = "\\\\";
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\\\\\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_cazoo_code();
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            result0 = parse_hash_rank();
            if (result0 !== null) {
              result1 = parse_cazoo_code();
              result1 = result1 !== null ? result1 : "";
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              if (input.substr(pos.offset, 2) === "#$") {
                result0 = "#$";
                advance(pos, 2);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"#$\"");
                }
              }
              if (result0 !== null) {
                result1 = parse_symbol();
                if (result1 !== null) {
                  result2 = parse_cazoo_code();
                  result2 = result2 !== null ? result2 : "";
                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = clone(pos0);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
              } else {
                result0 = null;
                pos = clone(pos0);
              }
              if (result0 === null) {
                pos0 = clone(pos);
                if (input.substr(pos.offset, 2) === "#[") {
                  result0 = "#[";
                  advance(pos, 2);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"#[\"");
                  }
                }
                if (result0 !== null) {
                  result1 = parse_balanced_code();
                  if (result1 !== null) {
                    if (input.substr(pos.offset, 2) === "#]") {
                      result2 = "#]";
                      advance(pos, 2);
                    } else {
                      result2 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"#]\"");
                      }
                    }
                    if (result2 !== null) {
                      result3 = parse_cazoo_code();
                      result3 = result3 !== null ? result3 : "";
                      if (result3 !== null) {
                        result0 = [result0, result1, result2, result3];
                      } else {
                        result0 = null;
                        pos = clone(pos0);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos0);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos0);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
                if (result0 === null) {
                  pos0 = clone(pos);
                  if (input.substr(pos.offset, 2) === "#{") {
                    result0 = "#{";
                    advance(pos, 2);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"#{\"");
                    }
                  }
                  if (result0 !== null) {
                    result1 = parse_statements();
                    if (result1 !== null) {
                      if (input.substr(pos.offset, 2) === "#}") {
                        result2 = "#}";
                        advance(pos, 2);
                      } else {
                        result2 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"#}\"");
                        }
                      }
                      if (result2 !== null) {
                        result3 = parse_cazoo_code();
                        result3 = result3 !== null ? result3 : "";
                        if (result3 !== null) {
                          result0 = [result0, result1, result2, result3];
                        } else {
                          result0 = null;
                          pos = clone(pos0);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos0);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos0);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos0);
                  }
                  if (result0 === null) {
                    pos0 = clone(pos);
                    if (input.substr(pos.offset, 5) === "#EVAL") {
                      result0 = "#EVAL";
                      advance(pos, 5);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"#EVAL\"");
                      }
                    }
                    if (result0 !== null) {
                      result1 = parse_balanced_code();
                      if (result1 !== null) {
                        if (input.substr(pos.offset, 5) === "#TEXT") {
                          result2 = "#TEXT";
                          advance(pos, 5);
                        } else {
                          result2 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"#TEXT\"");
                          }
                        }
                        if (result2 !== null) {
                          result3 = parse_cazoo_code();
                          result3 = result3 !== null ? result3 : "";
                          if (result3 !== null) {
                            result0 = [result0, result1, result2, result3];
                          } else {
                            result0 = null;
                            pos = clone(pos0);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos0);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos0);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos0);
                    }
                    if (result0 === null) {
                      pos0 = clone(pos);
                      if (input.charCodeAt(pos.offset) === 34) {
                        result0 = "\"";
                        advance(pos, 1);
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"\\\"\"");
                        }
                      }
                      if (result0 !== null) {
                        result1 = parse_cazoo_code();
                        result1 = result1 !== null ? result1 : "";
                        if (result1 !== null) {
                          result0 = [result0, result1];
                        } else {
                          result0 = null;
                          pos = clone(pos0);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos0);
                      }
                      if (result0 === null) {
                        pos0 = clone(pos);
                        if (input.charCodeAt(pos.offset) === 10) {
                          result0 = "\n";
                          advance(pos, 1);
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"\\n\"");
                          }
                        }
                        if (result0 !== null) {
                          result1 = parse_cazoo_code();
                          result1 = result1 !== null ? result1 : "";
                          if (result1 !== null) {
                            result0 = [result0, result1];
                          } else {
                            result0 = null;
                            pos = clone(pos0);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos0);
                        }
                        if (result0 === null) {
                          pos0 = clone(pos);
                          if (input.charCodeAt(pos.offset) === 40) {
                            result0 = "(";
                            advance(pos, 1);
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"(\"");
                            }
                          }
                          if (result0 !== null) {
                            result1 = parse_cazoo_code();
                            if (result1 !== null) {
                              if (input.charCodeAt(pos.offset) === 41) {
                                result2 = ")";
                                advance(pos, 1);
                              } else {
                                result2 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\")\"");
                                }
                              }
                              if (result2 !== null) {
                                result3 = parse_cazoo_code();
                                result3 = result3 !== null ? result3 : "";
                                if (result3 !== null) {
                                  result0 = [result0, result1, result2, result3];
                                } else {
                                  result0 = null;
                                  pos = clone(pos0);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos0);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos0);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos0);
                          }
                          if (result0 === null) {
                            pos0 = clone(pos);
                            if (input.charCodeAt(pos.offset) === 123) {
                              result0 = "{";
                              advance(pos, 1);
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"{\"");
                              }
                            }
                            if (result0 !== null) {
                              result1 = parse_cazoo_code();
                              if (result1 !== null) {
                                if (input.charCodeAt(pos.offset) === 125) {
                                  result2 = "}";
                                  advance(pos, 1);
                                } else {
                                  result2 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"}\"");
                                  }
                                }
                                if (result2 !== null) {
                                  result3 = parse_cazoo_code();
                                  result3 = result3 !== null ? result3 : "";
                                  if (result3 !== null) {
                                    result0 = [result0, result1, result2, result3];
                                  } else {
                                    result0 = null;
                                    pos = clone(pos0);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos0);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos0);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos0);
                            }
                            if (result0 === null) {
                              pos0 = clone(pos);
                              if (input.charCodeAt(pos.offset) === 91) {
                                result0 = "[";
                                advance(pos, 1);
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"[\"");
                                }
                              }
                              if (result0 !== null) {
                                result1 = parse_cazoo_code();
                                if (result1 !== null) {
                                  if (input.charCodeAt(pos.offset) === 93) {
                                    result2 = "]";
                                    advance(pos, 1);
                                  } else {
                                    result2 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"]\"");
                                    }
                                  }
                                  if (result2 !== null) {
                                    result3 = parse_cazoo_code();
                                    result3 = result3 !== null ? result3 : "";
                                    if (result3 !== null) {
                                      result0 = [result0, result1, result2, result3];
                                    } else {
                                      result0 = null;
                                      pos = clone(pos0);
                                    }
                                  } else {
                                    result0 = null;
                                    pos = clone(pos0);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos0);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos0);
                              }
                              if (result0 === null) {
                                pos0 = clone(pos);
                                result0 = parse_cazoo_code_chars();
                                if (result0 !== null) {
                                  result1 = parse_cazoo_code();
                                  result1 = result1 !== null ? result1 : "";
                                  if (result1 !== null) {
                                    result0 = [result0, result1];
                                  } else {
                                    result0 = null;
                                    pos = clone(pos0);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos0);
                                }
                                if (result0 === null) {
                                  pos0 = clone(pos);
                                  result0 = parse_hash_run();
                                  if (result0 !== null) {
                                    result1 = parse_cazoo_code();
                                    result1 = result1 !== null ? result1 : "";
                                    if (result1 !== null) {
                                      result0 = [result0, result1];
                                    } else {
                                      result0 = null;
                                      pos = clone(pos0);
                                    }
                                  } else {
                                    result0 = null;
                                    pos = clone(pos0);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_cazoo_code_chars() {
        var result0, result1;
        
        if (/^[^#(){}[\]\\"\n]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[^#(){}[\\]\\\\\"\\n]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[^#(){}[\]\\"\n]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[^#(){}[\\]\\\\\"\\n]");
              }
            }
          }
        } else {
          result0 = null;
        }
        return result0;
      }
      
      function parse_cazoo_intro_text() {
        var result0, result1, result2, result3, result4, result5;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_nonempty_quoted_text();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          if (input.substr(pos.offset, 6) === "#TITLE") {
            result1 = "#TITLE";
            advance(pos, 6);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"#TITLE\"");
            }
          }
          if (result1 !== null) {
            result3 = parse_spc();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_spc();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result3 = parse_nonempty_quoted_text();
              if (result3 !== null) {
                if (input.substr(pos.offset, 9) === "#ENDTITLE") {
                  result4 = "#ENDTITLE";
                  advance(pos, 9);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"#ENDTITLE\"");
                  }
                }
                if (result4 !== null) {
                  result5 = parse_nonempty_quoted_text();
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos0);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        if (result0 === null) {
          result0 = parse_nonempty_quoted_text();
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      
      
          // Warning: duplicated code (also found in fs.pegjs)
          // The code & grammar must be exactly the same so that the node IDs match up (code smell....)
          var sceneStack = [];
          var sceneIndex = {};
          var sceneLine = {};
          var sceneColumn = {};
      
          var lastPageName;
          function setPageName(n) { lastPageName = n; return true; }
          function resetPageName() { lastPageName = undefined; return true; }
      
          function currentScene() { return sceneStack[sceneStack.length - 1]; }
          function startScene(l,c) {
      	// for some reason, sceneFunction is getting called multiple times by the parser for the same scene
      	// The line/column ID is a hacky workaround to ensure things only get defined once...
      	// It also makes the node IDs more meaningful for debugging
      	var lc = l + "." + c;
      	var id;
      	if (!sceneIndex[lc]) {
      	    id = newNode(l,c);
      	    sceneLine[id] = l;
      	    sceneColumn[id] = c;
      	    sceneIndex[lc] = id;
      	} else
      	    id = sceneIndex[lc];
      	sceneStack.push(id);
      	return true;
          }
          function endScene() { return sceneStack.pop(); return true; }
      
          var nodes = [];
          function newNode(l,c) {
      	var n = typeof(lastPageName) == 'undefined' ? "scene" : lastPageName;
      	n = (nodes.length + 1) + "(" + n + "," + l + "," + c + ")";
      	nodes.push (n);
      	return n;
          }
      
          // end of duplicated code
      
          var nodeName = {};  // indexed by node ID
          var nodeId = {};  // indexed by node name
          var sceneText = {};  // indexed by node ID
          var edges = [];
          var canGoBack = {};
      
          var continuationIndex = {};
          function defaultContinuation() { return currentScene() + "+"; }
      
          function addEdge(node1,node2,props) {
      	if (typeof(node1) != 'undefined' && typeof(node2) != 'undefined')
      	    edges.push ([node1,node2,props]);
          }
      
          function sceneFunction(continuation,includes,scene_desc,choices) {
      	var source = currentScene();
      	var defCon = defaultContinuation();  // DefCon!
      	if (typeof continuation != 'undefined') {
      	    continuationIndex[defCon] = continuation;
      	}
      	var include_spacer = "";
      	if (typeof(includes) != 'undefined') {
                  for (var i = 0; i < includes.length; ++i) {
      		var text = includes[i][0], incl = includes[i][1];
      		addEdge (source, incl, {choiceType:"include"});
      		include_spacer += text;
      	    }
      	}
      	sceneText[source] = include_spacer + scene_desc;
      	for (var i = 0; i < choices.length; ++i) {
      	    var choice = choices[i][0];
      	    var target = choices[i][1];
      	    var props = { choiceType: choices.length>1 ? "choice" : "goto" };
      	    if (choice && choice.length)
      		props.label = choice;
      	    if (typeof target == 'undefined')
      		target = defCon;
      	    addEdge (source, target, props);
      	}
      	return currentScene();
          }
      
          function makeMinigameSceneFunction(intro,cazoo) {
      	// FIXME: should parse cazoo to extract target scenes
      	return currentScene();
          }
      
          function makeGoto (target) {
      	return ["", target];
          }
      
          function gotoIfDefined(x) {
      	return makeGoto(x);
          }
      
          function continueIfDefined() {
      	return gotoIfDefined (defaultContinuation());
          }
      
          function gosubWithContinuation(subroutine,continuation) {
      	addEdge (currentScene(), continuation, {choiceType:"continue"});
      	return subroutine;
          }
      
          function gosubWithDefaultContinuation(subroutine) {
      	return gosubWithContinuation(subroutine,defaultContinuation());
          }
      
          function makeAssignment(name,scene) {
      	nodeName[scene] = name;
      	nodeId[name] = scene;
      	return scene;
          }
      
          function makeInput(prompt,target,var_name) {
      	return [[prompt,target]];
          }
      
          function makeInlineConditional(cond,true_val,false_val) {
      	return "`(" + cond + " ?` " + true_val + " `:`" + false_val + "`)";
          }
      
          function makeConditional(cond,true_val,false_val) {
      	return makeInlineConditional(cond,true_val,false_val);
          }
      
          function isContinuationNode(id) {
      	return id.length > 0 && id.charAt(id.length-1) == "+";
          }
      
          function isSpecialNode(id) {
      	return id == "statusPage" || id == "codaPage";
          }
      
          function makeGEXF() {
      	var xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
      	xml += "<gexf>\n";
      	xml += "<graph type=\"static\" defaultedgetype=\"directed\">\n";
      	xml += "<attributes>\n";
      	xml += "<attribute id=\"File\" type=\"string\"/>\n";
      	xml += "<attribute id=\"Line\" type=\"integer\"/>\n";
      	xml += "<attribute id=\"Column\" type=\"integer\"/>\n";
      	xml += "<attribute id=\"Text\" type=\"string\"/>\n";
      	xml += "<attribute id=\"Bug\" type=\"string\"/>\n";
      	xml += "</attributes>\n";
      	// nodes
      	xml += "<nodes>\n";
      	// first the nodes with definitions
      	var definedNode = {};
      	var x = 0, y = 0;
      	for (var i = 0; i < nodes.length; ++i) {
      	    var id = nodes[i];
      	    var label = id in nodeName ? nodeName[id] : id;
      	    // check if id ends in a "+" (default continuation); if so, and it's not defined, skip it
      	    if (!isContinuationNode(id) && !isSpecialNode(label)) {
      		xml += "<node id=\"" + label + "\">\n";
      		xml += "<attvalues>\n";
      		xml += "<attvalue for=\"File\" value=\"" + FunkScene.lastLoadedFile + "\"/>";
      		xml += "<attvalue for=\"Line\" value=\"" + sceneLine[id] + "\"/>";
      		xml += "<attvalue for=\"Column\" value=\"" + sceneColumn[id] + "\"/>";
      		xml += "<attvalue for=\"Text\" value=\"" + sceneText[id] + "\"/>";
      		xml += "</attvalues>\n";
      		if (label == "start") {
      		    xml += "<color r=\"0\" g=\"128\" b=\"0\"/>\n";
      		} else if (id != label) {
      		    xml += "<color r=\"0\" g=\"0\" b=\"128\"/>\n";
      		} else {
      		    xml += "<color r=\"0\" g=\"0\" b=\"0\"/>\n";
      		}
      		xml += "<size value=\"2\"/>\n";
      		xml += "<x value=\"" + ++x + "\"/>\n";
      		xml += "<y value=\"" + ++y + "\"/>\n";
      		xml += "</node>\n";
      		definedNode[id] = 1;
      		definedNode[label] = 1;
      	    }
      	}
      	// now the "loose end" nodes, that are referred to but never defined
      	var looseEndNode = {};
      	for (var i = 0; i < edges.length; ++i) {
      	    var id = edges[i][1];
      	    if (!((id in definedNode) || (id in looseEndNode) || isContinuationNode(id))) {
      		xml += "<node id=\"" + id + "\">\n";
      		xml += "<attvalues>\n";
      		xml += "<attvalue for=\"Bug\" value=\"Loose End\"/>";
      		xml += "</attvalues>\n";
      		xml += "<color r=\"255\" g=\"0\" b=\"0\"/>\n";
      		xml += "<size value=\"4\"/>\n";
      		xml += "<x value=\"" + ++x + "\"/>\n";
      		xml += "<y value=\"" + ++y + "\"/>\n";
      		xml += "</node>\n";
      		looseEndNode[id] = 1;
      	    }
      	}
      	// end of nodes
      	xml += "</nodes>\n";
      	xml += "<edges>\n";
      	var edgeId = 0;
      	function addEdge (source, target, props) {
      	    if (source in nodeName) source = nodeName[source];
      	    if (target in nodeName) target = nodeName[target];
      	    if (!isContinuationNode(source) && !isContinuationNode(target)) {
      		xml += "<edge id=\"" + edgeId++ + "\" source=\"" + source + "\" target=\"" + target + "\"";
      		if ("choiceType" in props) xml += " choicetype=\"" + props.choiceType + "\"";
      		if ("label" in props) xml += " label=\"" + props.label + "\"";
      		xml += "/>\n";
      	    }
      	};
      	for (var i = 0; i < edges.length; ++i) {
      	    var source = edges[i][0];
      	    var target = edges[i][1];
      	    var props = edges[i][2];
      	    addEdge (source, target, props);
      	    if (target in canGoBack)
      		addEdge (target, source, props);
      	}
      	xml += "</edges>\n";
      	xml += "</graph>\n";
      	xml += "</gexf>\n";
      //	console.log(xml);
      	return xml;
          };
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos.offset === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos.offset < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos.offset === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos.offset !== input.length) {
        var offset = Math.max(pos.offset, rightmostFailuresPos.offset);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = pos.offset > rightmostFailuresPos.offset ? pos : rightmostFailuresPos;
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
