Cazoo.parser = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "start": parse_start,
        "body": parse_body,
        "statement": parse_statement,
        "spc": parse_spc,
        "comment": parse_comment,
        "multi_line_comment": parse_multi_line_comment,
        "single_line_comment": parse_single_line_comment,
        "line_terminator": parse_line_terminator,
        "source_character": parse_source_character,
        "particle_decl": parse_particle_decl,
        "symbol": parse_symbol,
        "particle_property_list": parse_particle_property_list,
        "particle_property": parse_particle_property,
        "icon_property": parse_icon_property,
        "image_path": parse_image_path,
        "neighborhood_property": parse_neighborhood_property,
        "isometric_property": parse_isometric_property,
        "rotates_property": parse_rotates_property,
        "sync_property": parse_sync_property,
        "rule": parse_rule,
        "lhs_source": parse_lhs_source,
        "lhs_target": parse_lhs_target,
        "rhs_source": parse_rhs_source,
        "rhs_target": parse_rhs_target,
        "symbol_or_null": parse_symbol_or_null,
        "symbol_or_wild": parse_symbol_or_wild,
        "symbol_or_lhs_macro": parse_symbol_or_lhs_macro,
        "lhs_macro": parse_lhs_macro,
        "dir": parse_dir,
        "compass_dir": parse_compass_dir,
        "relative_dir": parse_relative_dir,
        "optional_rate_clause": parse_optional_rate_clause,
        "sum_expr": parse_sum_expr,
        "product_expr": parse_product_expr,
        "primary_expr": parse_primary_expr,
        "nonnegative_real": parse_nonnegative_real,
        "param_decl": parse_param_decl,
        "tool_decl": parse_tool_decl,
        "tool_property_list": parse_tool_property_list,
        "tool_property": parse_tool_property,
        "numeric_value": parse_numeric_value,
        "symbol_value": parse_symbol_value,
        "symbol_or_wild_value": parse_symbol_or_wild_value,
        "optionally_directed_symbol_value": parse_optionally_directed_symbol_value,
        "positive_integer": parse_positive_integer,
        "nonnegative_integer": parse_nonnegative_integer,
        "init_block": parse_init_block,
        "init_list": parse_init_list,
        "init": parse_init,
        "optionally_directed_symbol": parse_optionally_directed_symbol,
        "goal_decl": parse_goal_decl,
        "size_decl": parse_size_decl
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = { offset: 0, line: 1, column: 1, seenCR: false };
      var reportFailures = 0;
      var rightmostFailuresPos = { offset: 0, line: 1, column: 1, seenCR: false };
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function clone(object) {
        var result = {};
        for (var key in object) {
          result[key] = object[key];
        }
        return result;
      }
      
      function advance(pos, n) {
        var endOffset = pos.offset + n;
        
        for (var offset = pos.offset; offset < endOffset; offset++) {
          var ch = input.charAt(offset);
          if (ch === "\n") {
            if (!pos.seenCR) { pos.line++; }
            pos.column = 1;
            pos.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            pos.line++;
            pos.column = 1;
            pos.seenCR = true;
          } else {
            pos.column++;
            pos.seenCR = false;
          }
        }
        
        pos.offset += n;
      }
      
      function matchFailed(failure) {
        if (pos.offset < rightmostFailuresPos.offset) {
          return;
        }
        
        if (pos.offset > rightmostFailuresPos.offset) {
          rightmostFailuresPos = clone(pos);
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_spc();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_spc();
        }
        if (result0 !== null) {
          result1 = parse_body();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, z) { return z; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_body() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_statement();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_spc();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_spc();
          }
          if (result1 !== null) {
            result2 = parse_body();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, s, z) { s(z); return z; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_statement();
          if (result0 !== null) {
            result0 = (function(offset, line, column, s) { var z = new Cazoo.Zoo(); s(z); return z; })(pos0.offset, pos0.line, pos0.column, result0);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_statement() {
        var result0;
        var pos0;
        
        result0 = parse_particle_decl();
        if (result0 === null) {
          result0 = parse_rule();
          if (result0 === null) {
            result0 = parse_param_decl();
            if (result0 === null) {
              result0 = parse_tool_decl();
              if (result0 === null) {
                result0 = parse_goal_decl();
                if (result0 === null) {
                  result0 = parse_size_decl();
                  if (result0 === null) {
                    result0 = parse_init_block();
                    if (result0 === null) {
                      pos0 = clone(pos);
                      result0 = parse_comment();
                      if (result0 !== null) {
                        result0 = (function(offset, line, column) { return function(){}; })(pos0.offset, pos0.line, pos0.column);
                      }
                      if (result0 === null) {
                        pos = clone(pos0);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_spc() {
        var result0;
        
        if (/^[ \t\n\r]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t\\n\\r]");
          }
        }
        return result0;
      }
      
      function parse_comment() {
        var result0;
        
        result0 = parse_multi_line_comment();
        if (result0 === null) {
          result0 = parse_single_line_comment();
        }
        return result0;
      }
      
      function parse_multi_line_comment() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "/*") {
          result0 = "/*";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"/*\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          pos1 = clone(pos);
          pos2 = clone(pos);
          reportFailures++;
          if (input.substr(pos.offset, 2) === "*/") {
            result2 = "*/";
            advance(pos, 2);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\"*/\"");
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          if (result2 !== null) {
            result3 = parse_source_character();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = clone(pos);
            pos2 = clone(pos);
            reportFailures++;
            if (input.substr(pos.offset, 2) === "*/") {
              result2 = "*/";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"*/\"");
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            if (result2 !== null) {
              result3 = parse_source_character();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 2) === "*/") {
              result2 = "*/";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"*/\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_single_line_comment() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "//") {
          result0 = "//";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"//\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          pos1 = clone(pos);
          pos2 = clone(pos);
          reportFailures++;
          result2 = parse_line_terminator();
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          if (result2 !== null) {
            result3 = parse_source_character();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = clone(pos);
            pos2 = clone(pos);
            reportFailures++;
            result2 = parse_line_terminator();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            if (result2 !== null) {
              result3 = parse_source_character();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_line_terminator() {
        var result0;
        
        if (/^[\n\r\u2028\u2029]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\n\\r\\u2028\\u2029]");
          }
        }
        return result0;
      }
      
      function parse_source_character() {
        var result0;
        
        if (input.length > pos.offset) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("any character");
          }
        }
        return result0;
      }
      
      function parse_particle_decl() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 4) === "type") {
          result0 = "type";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"type\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_spc();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_spc();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_symbol();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_spc();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_spc();
              }
              if (result3 !== null) {
                if (input.charCodeAt(pos.offset) === 123) {
                  result4 = "{";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"{\"");
                  }
                }
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_spc();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_spc();
                  }
                  if (result5 !== null) {
                    result6 = parse_particle_property_list();
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_spc();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_spc();
                      }
                      if (result7 !== null) {
                        if (input.charCodeAt(pos.offset) === 125) {
                          result8 = "}";
                          advance(pos, 1);
                        } else {
                          result8 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"}\"");
                          }
                        }
                        if (result8 !== null) {
                          result9 = [];
                          result10 = parse_spc();
                          while (result10 !== null) {
                            result9.push(result10);
                            result10 = parse_spc();
                          }
                          if (result9 !== null) {
                            if (input.charCodeAt(pos.offset) === 59) {
                              result10 = ";";
                              advance(pos, 1);
                            } else {
                              result10 = null;
                              if (reportFailures === 0) {
                                matchFailed("\";\"");
                              }
                            }
                            if (result10 !== null) {
                              result11 = [];
                              result12 = parse_spc();
                              while (result12 !== null) {
                                result11.push(result12);
                                result12 = parse_spc();
                              }
                              if (result11 !== null) {
                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11];
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, n, p) { return function(z){z.defineType(n,p);} })(pos0.offset, pos0.line, pos0.column, result0[2], result0[6]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_symbol() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[A-Za-z_]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[A-Za-z_]");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[0-9A-Za-z_]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9A-Za-z_]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[0-9A-Za-z_]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9A-Za-z_]");
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, h, t) { return h + t.join(""); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_particle_property_list() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_particle_property();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_spc();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_spc();
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 44) {
              result2 = ",";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_spc();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_spc();
              }
              if (result3 !== null) {
                result4 = parse_particle_property_list();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, h, t) { return Cazoo.extend(t,h); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          result0 = parse_particle_property();
        }
        return result0;
      }
      
      function parse_particle_property() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_icon_property();
        if (result0 !== null) {
          result0 = (function(offset, line, column, p) { return { icon: p }; })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_neighborhood_property();
          if (result0 !== null) {
            result0 = (function(offset, line, column, p) { return { neighborhood: p }; })(pos0.offset, pos0.line, pos0.column, result0);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            result0 = parse_isometric_property();
            if (result0 !== null) {
              result0 = (function(offset, line, column, p) { return { isometric: p }; })(pos0.offset, pos0.line, pos0.column, result0);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              result0 = parse_rotates_property();
              if (result0 !== null) {
                result0 = (function(offset, line, column, p) { return { rotates: p }; })(pos0.offset, pos0.line, pos0.column, result0);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                pos0 = clone(pos);
                result0 = parse_sync_property();
                if (result0 !== null) {
                  result0 = (function(offset, line, column, p) { return { sync: p }; })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                  pos = clone(pos0);
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_icon_property() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 4) === "icon") {
          result0 = "icon";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"icon\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_spc();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_spc();
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 58) {
              result2 = ":";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\":\"");
              }
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_spc();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_spc();
              }
              if (result3 !== null) {
                result4 = parse_image_path();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, p) { return p; })(pos0.offset, pos0.line, pos0.column, result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_image_path() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[A-Za-z0-9]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[A-Za-z0-9]");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[A-Za-z0-9\/\-_]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[A-Za-z0-9\\/\\-_]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[A-Za-z0-9\/\-_]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[A-Za-z0-9\\/\\-_]");
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, h, t) { return h + t.join(""); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_neighborhood_property() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 5) === "moore") {
          result0 = "moore";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"moore\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) { return Cazoo.mooreHood; })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          if (input.substr(pos.offset, 7) === "neumann") {
            result0 = "neumann";
            advance(pos, 7);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"neumann\"");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column) { return Cazoo.neumannHood; })(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            if (input.substr(pos.offset, 6) === "bishop") {
              result0 = "bishop";
              advance(pos, 6);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"bishop\"");
              }
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column) { return Cazoo.bishopHood; })(pos0.offset, pos0.line, pos0.column);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
          }
        }
        return result0;
      }
      
      function parse_isometric_property() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 9) === "isometric") {
          result0 = "isometric";
          advance(pos, 9);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"isometric\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return 1;})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          if (input.substr(pos.offset, 8) === "directed") {
            result0 = "directed";
            advance(pos, 8);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"directed\"");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column) {return 0;})(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_rotates_property() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 7) === "rotates") {
          result0 = "rotates";
          advance(pos, 7);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"rotates\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return 1;})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          if (input.substr(pos.offset, 7) === "upright") {
            result0 = "upright";
            advance(pos, 7);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"upright\"");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column) {return 0;})(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_sync_property() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 4) === "sync") {
          result0 = "sync";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"sync\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return 1;})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          if (input.substr(pos.offset, 5) === "async") {
            result0 = "async";
            advance(pos, 5);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"async\"");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column) {return 0;})(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_rule() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_lhs_source();
        if (result0 !== null) {
          result2 = parse_spc();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_spc();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_lhs_target();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_spc();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_spc();
              }
              if (result3 !== null) {
                if (input.substr(pos.offset, 2) === "->") {
                  result4 = "->";
                  advance(pos, 2);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"->\"");
                  }
                }
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_spc();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_spc();
                  }
                  if (result5 !== null) {
                    result6 = parse_rhs_source();
                    if (result6 !== null) {
                      result8 = parse_spc();
                      if (result8 !== null) {
                        result7 = [];
                        while (result8 !== null) {
                          result7.push(result8);
                          result8 = parse_spc();
                        }
                      } else {
                        result7 = null;
                      }
                      if (result7 !== null) {
                        result8 = parse_rhs_target();
                        if (result8 !== null) {
                          result9 = [];
                          result10 = parse_spc();
                          while (result10 !== null) {
                            result9.push(result10);
                            result10 = parse_spc();
                          }
                          if (result9 !== null) {
                            result10 = parse_optional_rate_clause();
                            if (result10 !== null) {
                              result11 = [];
                              result12 = parse_spc();
                              while (result12 !== null) {
                                result11.push(result12);
                                result12 = parse_spc();
                              }
                              if (result11 !== null) {
                                if (input.charCodeAt(pos.offset) === 59) {
                                  result12 = ";";
                                  advance(pos, 1);
                                } else {
                                  result12 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\";\"");
                                  }
                                }
                                if (result12 !== null) {
                                  result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b, c, d, r) { return function(z) {
             z.initRules (a[0], b[0]);
             z.rule[a[0]][b[0]].push ([a,b,c,d,r]); }; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[6], result0[8], result0[10]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_lhs_source() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_symbol();
        if (result0 !== null) {
          result1 = parse_dir();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_lhs_target() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_symbol_or_wild();
        if (result0 !== null) {
          result1 = parse_dir();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_rhs_source() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_symbol_or_lhs_macro();
        if (result0 !== null) {
          result1 = parse_dir();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_rhs_target() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_symbol_or_lhs_macro();
        if (result0 !== null) {
          result1 = parse_dir();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_symbol_or_null() {
        var result0;
        
        result0 = parse_symbol();
        if (result0 === null) {
          if (input.charCodeAt(pos.offset) === 95) {
            result0 = "_";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"_\"");
            }
          }
        }
        return result0;
      }
      
      function parse_symbol_or_wild() {
        var result0;
        
        result0 = parse_symbol_or_null();
        if (result0 === null) {
          if (input.charCodeAt(pos.offset) === 42) {
            result0 = "*";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"*\"");
            }
          }
        }
        return result0;
      }
      
      function parse_symbol_or_lhs_macro() {
        var result0;
        
        result0 = parse_symbol_or_null();
        if (result0 === null) {
          result0 = parse_lhs_macro();
        }
        return result0;
      }
      
      function parse_lhs_macro() {
        var result0;
        
        if (input.substr(pos.offset, 2) === "$s") {
          result0 = "$s";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"$s\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 2) === "$t") {
            result0 = "$t";
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"$t\"");
            }
          }
        }
        return result0;
      }
      
      function parse_dir() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 46) {
          result0 = ".";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\".\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_compass_dir();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, d) {return d;})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 46) {
            result0 = ".";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_relative_dir();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, d) {return d;})(pos0.offset, pos0.line, pos0.column, result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 46) {
              result0 = ".";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            if (result0 !== null) {
              if (input.charCodeAt(pos.offset) === 42) {
                result1 = "*";
                advance(pos, 1);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"*\"");
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, d) {return d;})(pos0.offset, pos0.line, pos0.column, result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
          }
        }
        return result0;
      }
      
      function parse_compass_dir() {
        var result0;
        
        if (input.substr(pos.offset, 2) === "nw") {
          result0 = "nw";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"nw\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 2) === "ne") {
            result0 = "ne";
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"ne\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos.offset, 2) === "se") {
              result0 = "se";
              advance(pos, 2);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"se\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos.offset, 2) === "sw") {
                result0 = "sw";
                advance(pos, 2);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"sw\"");
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos.offset) === 110) {
                  result0 = "n";
                  advance(pos, 1);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"n\"");
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos.offset) === 101) {
                    result0 = "e";
                    advance(pos, 1);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"e\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.charCodeAt(pos.offset) === 115) {
                      result0 = "s";
                      advance(pos, 1);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"s\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.charCodeAt(pos.offset) === 119) {
                        result0 = "w";
                        advance(pos, 1);
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"w\"");
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_relative_dir() {
        var result0;
        
        if (input.substr(pos.offset, 2) === "fl") {
          result0 = "fl";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"fl\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 2) === "fr") {
            result0 = "fr";
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"fr\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos.offset, 2) === "bl") {
              result0 = "bl";
              advance(pos, 2);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"bl\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos.offset, 2) === "br") {
                result0 = "br";
                advance(pos, 2);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"br\"");
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos.offset) === 102) {
                  result0 = "f";
                  advance(pos, 1);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"f\"");
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos.offset) === 98) {
                    result0 = "b";
                    advance(pos, 1);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"b\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.charCodeAt(pos.offset) === 108) {
                      result0 = "l";
                      advance(pos, 1);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"l\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.charCodeAt(pos.offset) === 114) {
                        result0 = "r";
                        advance(pos, 1);
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"r\"");
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_optional_rate_clause() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 58) {
          result0 = ":";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\":\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_spc();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_spc();
          }
          if (result1 !== null) {
            result2 = parse_sum_expr();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, r) { return r[0]; })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = [];
          if (result0 !== null) {
            result0 = (function(offset, line, column) { return 1; })(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_sum_expr() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_product_expr();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_spc();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_spc();
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 43) {
              result2 = "+";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"+\"");
              }
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_spc();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_spc();
              }
              if (result3 !== null) {
                result4 = parse_sum_expr();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, l, r) { return [function(z){return l[0](z) + r[0](z);}, Cazoo.extend(l[1],r[1])]; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          result0 = parse_product_expr();
        }
        return result0;
      }
      
      function parse_product_expr() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_primary_expr();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_spc();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_spc();
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 42) {
              result2 = "*";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"*\"");
              }
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_spc();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_spc();
              }
              if (result3 !== null) {
                result4 = parse_product_expr();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, l, r) { return [function(z){return l[0](z) * r[0](z);}, Cazoo.extend(l[1],r[1])]; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_primary_expr();
          if (result0 !== null) {
            result1 = [];
            result2 = parse_spc();
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_spc();
            }
            if (result1 !== null) {
              if (input.charCodeAt(pos.offset) === 47) {
                result2 = "/";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"/\"");
                }
              }
              if (result2 !== null) {
                result3 = [];
                result4 = parse_spc();
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse_spc();
                }
                if (result3 !== null) {
                  result4 = parse_product_expr();
                  if (result4 !== null) {
                    result0 = [result0, result1, result2, result3, result4];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, l, r) { return [function(z){return l[0](z) / r[0](z);}, Cazoo.extend(l[1],r[1])]; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            result0 = parse_primary_expr();
          }
        }
        return result0;
      }
      
      function parse_primary_expr() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        result0 = parse_nonnegative_real();
        if (result0 !== null) {
          result0 = (function(offset, line, column, n) { return [function(z){return n;},{}]; })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_symbol();
          if (result0 !== null) {
            result0 = (function(offset, line, column, x) { var h={}; h[x]=1; return [function(z){return z.param[x](z);},h]; })(pos0.offset, pos0.line, pos0.column, result0);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 40) {
              result0 = "(";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"(\"");
              }
            }
            if (result0 !== null) {
              result1 = [];
              result2 = parse_spc();
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_spc();
              }
              if (result1 !== null) {
                result2 = parse_sum_expr();
                if (result2 !== null) {
                  result3 = [];
                  result4 = parse_spc();
                  while (result4 !== null) {
                    result3.push(result4);
                    result4 = parse_spc();
                  }
                  if (result3 !== null) {
                    if (input.charCodeAt(pos.offset) === 41) {
                      result4 = ")";
                      advance(pos, 1);
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("\")\"");
                      }
                    }
                    if (result4 !== null) {
                      result0 = [result0, result1, result2, result3, result4];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, e) { return e; })(pos0.offset, pos0.line, pos0.column, result0[2]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
          }
        }
        return result0;
      }
      
      function parse_nonnegative_real() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (/^[0-9]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[0-9]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, n) { return parseFloat (n.join("")); })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = [];
          if (/^[0-9]/.test(input.charAt(pos.offset))) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
          while (result1 !== null) {
            result0.push(result1);
            if (/^[0-9]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
          }
          if (result0 !== null) {
            if (input.charCodeAt(pos.offset) === 46) {
              result1 = ".";
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            if (result1 !== null) {
              if (/^[0-9]/.test(input.charAt(pos.offset))) {
                result3 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9]");
                }
              }
              if (result3 !== null) {
                result2 = [];
                while (result3 !== null) {
                  result2.push(result3);
                  if (/^[0-9]/.test(input.charAt(pos.offset))) {
                    result3 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("[0-9]");
                    }
                  }
                }
              } else {
                result2 = null;
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, h, t) { return parseFloat (h + "." + t.join("")); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_param_decl() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_symbol();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_spc();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_spc();
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 61) {
              result2 = "=";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"=\"");
              }
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_spc();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_spc();
              }
              if (result3 !== null) {
                result4 = parse_sum_expr();
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_spc();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_spc();
                  }
                  if (result5 !== null) {
                    if (input.charCodeAt(pos.offset) === 59) {
                      result6 = ";";
                      advance(pos, 1);
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\";\"");
                      }
                    }
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, l, r) { if (r[1][l]) throw "Definition of parameter " + l + " is circular: it depends on " + l + " itself";
           return function(z){ Cazoo.defineSymbol ("Parameter", z.param, l, r[0]); }; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_tool_decl() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 4) === "tool") {
          result0 = "tool";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"tool\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_spc();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_spc();
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 123) {
              result2 = "{";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"{\"");
              }
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_spc();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_spc();
              }
              if (result3 !== null) {
                result4 = parse_tool_property_list();
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_spc();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_spc();
                  }
                  if (result5 !== null) {
                    if (input.charCodeAt(pos.offset) === 125) {
                      result6 = "}";
                      advance(pos, 1);
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"}\"");
                      }
                    }
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_spc();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_spc();
                      }
                      if (result7 !== null) {
                        if (input.charCodeAt(pos.offset) === 59) {
                          result8 = ";";
                          advance(pos, 1);
                        } else {
                          result8 = null;
                          if (reportFailures === 0) {
                            matchFailed("\";\"");
                          }
                        }
                        if (result8 !== null) {
                          result9 = [];
                          result10 = parse_spc();
                          while (result10 !== null) {
                            result9.push(result10);
                            result10 = parse_spc();
                          }
                          if (result9 !== null) {
                            result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9];
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, p) { return function(z){z.tool.unshift(p);}; })(pos0.offset, pos0.line, pos0.column, result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_tool_property_list() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_tool_property();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_spc();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_spc();
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 44) {
              result2 = ",";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_spc();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_spc();
              }
              if (result3 !== null) {
                result4 = parse_tool_property_list();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, p, h) { h[p[0]] = p[1]; return h; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_tool_property();
          if (result0 !== null) {
            result0 = (function(offset, line, column, p) { var h = new Cazoo.Tool(); h[p[0]] = p[1]; return h; })(pos0.offset, pos0.line, pos0.column, result0);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_tool_property() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 4) === "type") {
          result0 = "type";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"type\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_optionally_directed_symbol_value();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, v) { return ["state", v]; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          if (input.substr(pos.offset, 4) === "rate") {
            result0 = "rate";
            advance(pos, 4);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"rate\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_numeric_value();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            if (input.substr(pos.offset, 6) === "radius") {
              result0 = "radius";
              advance(pos, 6);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"radius\"");
              }
            }
            if (result0 !== null) {
              result1 = parse_numeric_value();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              if (input.substr(pos.offset, 7) === "reserve") {
                result0 = "reserve";
                advance(pos, 7);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"reserve\"");
                }
              }
              if (result0 !== null) {
                result1 = parse_numeric_value();
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
              } else {
                result0 = null;
                pos = clone(pos0);
              }
              if (result0 === null) {
                pos0 = clone(pos);
                if (input.substr(pos.offset, 8) === "recharge") {
                  result0 = "recharge";
                  advance(pos, 8);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"recharge\"");
                  }
                }
                if (result0 !== null) {
                  result1 = parse_numeric_value();
                  if (result1 !== null) {
                    result0 = [result0, result1];
                  } else {
                    result0 = null;
                    pos = clone(pos0);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
                if (result0 === null) {
                  pos0 = clone(pos);
                  if (input.substr(pos.offset, 9) === "overwrite") {
                    result0 = "overwrite";
                    advance(pos, 9);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"overwrite\"");
                    }
                  }
                  if (result0 !== null) {
                    result1 = parse_symbol_or_wild_value();
                    if (result1 !== null) {
                      result0 = [result0, result1];
                    } else {
                      result0 = null;
                      pos = clone(pos0);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos0);
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_numeric_value() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_spc();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_spc();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 58) {
            result1 = ":";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\":\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_spc();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_spc();
            }
            if (result2 !== null) {
              result3 = parse_positive_integer();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, n) { return n; })(pos0.offset, pos0.line, pos0.column, result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_symbol_value() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_spc();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_spc();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 58) {
            result1 = ":";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\":\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_spc();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_spc();
            }
            if (result2 !== null) {
              result3 = parse_symbol();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, s) { return s; })(pos0.offset, pos0.line, pos0.column, result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_symbol_or_wild_value() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_spc();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_spc();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 58) {
            result1 = ":";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\":\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_spc();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_spc();
            }
            if (result2 !== null) {
              result3 = parse_symbol_or_wild();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, s) { return s; })(pos0.offset, pos0.line, pos0.column, result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_optionally_directed_symbol_value() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_spc();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_spc();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 58) {
            result1 = ":";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\":\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_spc();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_spc();
            }
            if (result2 !== null) {
              result3 = parse_optionally_directed_symbol();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, s) { return s; })(pos0.offset, pos0.line, pos0.column, result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_positive_integer() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[1-9]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[1-9]");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[0-9]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[0-9]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, h, t) { t.unshift(h); return parseInt (t.join(""), 10); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_nonnegative_integer() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 48) {
          result0 = "0";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"0\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) { return 0; })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          result0 = parse_positive_integer();
        }
        return result0;
      }
      
      function parse_init_block() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 4) === "init") {
          result0 = "init";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"init\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_spc();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_spc();
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 123) {
              result2 = "{";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"{\"");
              }
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_spc();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_spc();
              }
              if (result3 !== null) {
                result4 = parse_init_list();
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_spc();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_spc();
                  }
                  if (result5 !== null) {
                    if (input.charCodeAt(pos.offset) === 125) {
                      result6 = "}";
                      advance(pos, 1);
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"}\"");
                      }
                    }
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_spc();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_spc();
                      }
                      if (result7 !== null) {
                        if (input.charCodeAt(pos.offset) === 59) {
                          result8 = ";";
                          advance(pos, 1);
                        } else {
                          result8 = null;
                          if (reportFailures === 0) {
                            matchFailed("\";\"");
                          }
                        }
                        if (result8 !== null) {
                          result9 = [];
                          result10 = parse_spc();
                          while (result10 !== null) {
                            result9.push(result10);
                            result10 = parse_spc();
                          }
                          if (result9 !== null) {
                            result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9];
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, l) { return function(z){z.init=z.init.concat(l);}; })(pos0.offset, pos0.line, pos0.column, result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_init_list() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_init();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_spc();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_spc();
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 44) {
              result2 = ",";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_spc();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_spc();
              }
              if (result3 !== null) {
                result4 = parse_init_list();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, i, l) { return l.push(i); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_init();
          if (result0 !== null) {
            result0 = (function(offset, line, column, i) { return [i]; })(pos0.offset, pos0.line, pos0.column, result0);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_init() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 91) {
          result0 = "[";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"[\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_spc();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_spc();
          }
          if (result1 !== null) {
            result2 = parse_nonnegative_integer();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_spc();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_spc();
              }
              if (result3 !== null) {
                if (input.charCodeAt(pos.offset) === 44) {
                  result4 = ",";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\",\"");
                  }
                }
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_spc();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_spc();
                  }
                  if (result5 !== null) {
                    result6 = parse_nonnegative_integer();
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_spc();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_spc();
                      }
                      if (result7 !== null) {
                        if (input.charCodeAt(pos.offset) === 44) {
                          result8 = ",";
                          advance(pos, 1);
                        } else {
                          result8 = null;
                          if (reportFailures === 0) {
                            matchFailed("\",\"");
                          }
                        }
                        if (result8 !== null) {
                          result9 = [];
                          result10 = parse_spc();
                          while (result10 !== null) {
                            result9.push(result10);
                            result10 = parse_spc();
                          }
                          if (result9 !== null) {
                            result10 = parse_optionally_directed_symbol();
                            if (result10 !== null) {
                              result11 = [];
                              result12 = parse_spc();
                              while (result12 !== null) {
                                result11.push(result12);
                                result12 = parse_spc();
                              }
                              if (result11 !== null) {
                                if (input.charCodeAt(pos.offset) === 93) {
                                  result12 = "]";
                                  advance(pos, 1);
                                } else {
                                  result12 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"]\"");
                                  }
                                }
                                if (result12 !== null) {
                                  result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, x, y, s) { return [x,y,s]; })(pos0.offset, pos0.line, pos0.column, result0[2], result0[6], result0[10]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_optionally_directed_symbol() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_symbol();
        if (result0 !== null) {
          result1 = parse_dir();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_goal_decl() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 7) === "timeout") {
          result0 = "timeout";
          advance(pos, 7);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"timeout\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_spc();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_spc();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_positive_integer();
            if (result2 !== null) {
              result3 = parse_symbol_value();
              if (result3 !== null) {
                result4 = [];
                result5 = parse_spc();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_spc();
                }
                if (result4 !== null) {
                  if (input.charCodeAt(pos.offset) === 59) {
                    result5 = ";";
                    advance(pos, 1);
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\";\"");
                    }
                  }
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse_spc();
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse_spc();
                    }
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, t, g) { return function(z){z.goal.push(["testTimeoutGoal",t,g]);}; })(pos0.offset, pos0.line, pos0.column, result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 7) === "extinct") {
            result0 = "extinct";
            advance(pos, 7);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"extinct\"");
            }
          }
          if (result0 !== null) {
            result2 = parse_spc();
            if (result2 !== null) {
              result1 = [];
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_spc();
              }
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              result2 = parse_symbol();
              if (result2 !== null) {
                result3 = parse_symbol_value();
                if (result3 !== null) {
                  result4 = [];
                  result5 = parse_spc();
                  while (result5 !== null) {
                    result4.push(result5);
                    result5 = parse_spc();
                  }
                  if (result4 !== null) {
                    if (input.charCodeAt(pos.offset) === 59) {
                      result5 = ";";
                      advance(pos, 1);
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\";\"");
                      }
                    }
                    if (result5 !== null) {
                      result6 = [];
                      result7 = parse_spc();
                      while (result7 !== null) {
                        result6.push(result7);
                        result7 = parse_spc();
                      }
                      if (result6 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, s, g) { return function(z){z.goal.push(["testExtinctionGoal",s,g]);}; })(pos0.offset, pos0.line, pos0.column, result0[2], result0[3]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_size_decl() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 4) === "size") {
          result0 = "size";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"size\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_spc();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_spc();
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 91) {
              result2 = "[";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"[\"");
              }
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_spc();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_spc();
              }
              if (result3 !== null) {
                result4 = parse_positive_integer();
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_spc();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_spc();
                  }
                  if (result5 !== null) {
                    if (input.charCodeAt(pos.offset) === 44) {
                      result6 = ",";
                      advance(pos, 1);
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\",\"");
                      }
                    }
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_spc();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_spc();
                      }
                      if (result7 !== null) {
                        result8 = parse_positive_integer();
                        if (result8 !== null) {
                          result9 = [];
                          result10 = parse_spc();
                          while (result10 !== null) {
                            result9.push(result10);
                            result10 = parse_spc();
                          }
                          if (result9 !== null) {
                            if (input.charCodeAt(pos.offset) === 93) {
                              result10 = "]";
                              advance(pos, 1);
                            } else {
                              result10 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"]\"");
                              }
                            }
                            if (result10 !== null) {
                              result11 = [];
                              result12 = parse_spc();
                              while (result12 !== null) {
                                result11.push(result12);
                                result12 = parse_spc();
                              }
                              if (result11 !== null) {
                                if (input.charCodeAt(pos.offset) === 59) {
                                  result12 = ";";
                                  advance(pos, 1);
                                } else {
                                  result12 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\";\"");
                                  }
                                }
                                if (result12 !== null) {
                                  result13 = [];
                                  result14 = parse_spc();
                                  while (result14 !== null) {
                                    result13.push(result14);
                                    result14 = parse_spc();
                                  }
                                  if (result13 !== null) {
                                    result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13];
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, x, y) { return function(z){z.size=[x,y];}; })(pos0.offset, pos0.line, pos0.column, result0[4], result0[8]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      
      
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos.offset === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos.offset < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos.offset === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos.offset !== input.length) {
        var offset = Math.max(pos.offset, rightmostFailuresPos.offset);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = pos.offset > rightmostFailuresPos.offset ? pos : rightmostFailuresPos;
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
